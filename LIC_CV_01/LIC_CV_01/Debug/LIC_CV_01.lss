
LIC_CV_01.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000014e2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000006  00800060  000014e2  00001576  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          000001a0  00800066  00800066  0000157c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000157c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000230  00000000  00000000  000015ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000029cb  00000000  00000000  000017dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a04  00000000  00000000  000041a7  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d85  00000000  00000000  00004bab  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000006a4  00000000  00000000  00005930  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000009bb  00000000  00000000  00005fd4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00001be8  00000000  00000000  0000698f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000001d0  00000000  00000000  00008577  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 35 00 	jmp	0x6a	; 0x6a <__ctors_end>
       4:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       8:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
       c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      10:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      14:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      18:	0c 94 37 09 	jmp	0x126e	; 0x126e <__vector_6>
      1c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      20:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      24:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      28:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      2c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      30:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      34:	0c 94 6b 07 	jmp	0xed6	; 0xed6 <__vector_13>
      38:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      3c:	0c 94 99 07 	jmp	0xf32	; 0xf32 <__vector_15>
      40:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      44:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      48:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      4c:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      50:	0c 94 52 00 	jmp	0xa4	; 0xa4 <__bad_interrupt>
      54:	dc 08       	sbc	r13, r12
      56:	df 08       	sbc	r13, r15
      58:	e2 08       	sbc	r14, r2
      5a:	e5 08       	sbc	r14, r5
      5c:	e8 08       	sbc	r14, r8
      5e:	eb 08       	sbc	r14, r11
      60:	ee 08       	sbc	r14, r14
      62:	f1 08       	sbc	r15, r1
      64:	f4 08       	sbc	r15, r4
      66:	f7 08       	sbc	r15, r7
      68:	fa 08       	sbc	r15, r10

0000006a <__ctors_end>:
      6a:	11 24       	eor	r1, r1
      6c:	1f be       	out	0x3f, r1	; 63
      6e:	cf e5       	ldi	r28, 0x5F	; 95
      70:	d8 e0       	ldi	r29, 0x08	; 8
      72:	de bf       	out	0x3e, r29	; 62
      74:	cd bf       	out	0x3d, r28	; 61

00000076 <__do_copy_data>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a0 e6       	ldi	r26, 0x60	; 96
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	e2 ee       	ldi	r30, 0xE2	; 226
      7e:	f4 e1       	ldi	r31, 0x14	; 20
      80:	02 c0       	rjmp	.+4      	; 0x86 <__do_copy_data+0x10>
      82:	05 90       	lpm	r0, Z+
      84:	0d 92       	st	X+, r0
      86:	a6 36       	cpi	r26, 0x66	; 102
      88:	b1 07       	cpc	r27, r17
      8a:	d9 f7       	brne	.-10     	; 0x82 <__do_copy_data+0xc>

0000008c <__do_clear_bss>:
      8c:	22 e0       	ldi	r18, 0x02	; 2
      8e:	a6 e6       	ldi	r26, 0x66	; 102
      90:	b0 e0       	ldi	r27, 0x00	; 0
      92:	01 c0       	rjmp	.+2      	; 0x96 <.do_clear_bss_start>

00000094 <.do_clear_bss_loop>:
      94:	1d 92       	st	X+, r1

00000096 <.do_clear_bss_start>:
      96:	a6 30       	cpi	r26, 0x06	; 6
      98:	b2 07       	cpc	r27, r18
      9a:	e1 f7       	brne	.-8      	; 0x94 <.do_clear_bss_loop>
      9c:	0e 94 0e 0a 	call	0x141c	; 0x141c <main>
      a0:	0c 94 6f 0a 	jmp	0x14de	; 0x14de <_exit>

000000a4 <__bad_interrupt>:
      a4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a8 <mfrc522_write>:
        status = mfrc522_to_card(PCD_TRANSCEIVE, buff, 18, buff, &recvBits);   
        
        //cek
        //printf("w2 = %d\t%d\t%.2X\n", status, recvBits, buff[0]);
        
		if ((status != CARD_FOUND) || (recvBits != 4) || ((buff[0] & 0x0F) != 0x0A))
      a8:	cf 93       	push	r28
      aa:	c6 2f       	mov	r28, r22
      ac:	c4 98       	cbi	0x18, 4	; 24
      ae:	88 0f       	add	r24, r24
      b0:	8e 77       	andi	r24, 0x7E	; 126
      b2:	0e 94 34 03 	call	0x668	; 0x668 <spi_transmit>
      b6:	8c 2f       	mov	r24, r28
      b8:	0e 94 34 03 	call	0x668	; 0x668 <spi_transmit>
      bc:	c4 9a       	sbi	0x18, 4	; 24
      be:	cf 91       	pop	r28
      c0:	08 95       	ret

000000c2 <mfrc522_read>:
      c2:	c4 98       	cbi	0x18, 4	; 24
      c4:	88 0f       	add	r24, r24
      c6:	8e 77       	andi	r24, 0x7E	; 126
      c8:	80 68       	ori	r24, 0x80	; 128
      ca:	0e 94 34 03 	call	0x668	; 0x668 <spi_transmit>
      ce:	80 e0       	ldi	r24, 0x00	; 0
        {   
			status = ERROR;   
      d0:	0e 94 34 03 	call	0x668	; 0x668 <spi_transmit>
      d4:	c4 9a       	sbi	0x18, 4	; 24
      d6:	08 95       	ret

000000d8 <mfrc522_reset>:
      d8:	6f e0       	ldi	r22, 0x0F	; 15
		}
    }
    
    return status;
}
      da:	81 e0       	ldi	r24, 0x01	; 1
      dc:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
      e0:	08 95       	ret

000000e2 <mfrc522_init>:
      e2:	0e 94 6c 00 	call	0xd8	; 0xd8 <mfrc522_reset>
      e6:	6d e8       	ldi	r22, 0x8D	; 141
      e8:	8a e2       	ldi	r24, 0x2A	; 42
      ea:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
      ee:	6e e3       	ldi	r22, 0x3E	; 62
      f0:	8b e2       	ldi	r24, 0x2B	; 43
      f2:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
	
	mfrc522_reset();
	
	mfrc522_write(TModeReg, 0x8D);
    mfrc522_write(TPrescalerReg, 0x3E);
    mfrc522_write(TReloadReg_1, 30);   
      f6:	6e e1       	ldi	r22, 0x1E	; 30
      f8:	8c e2       	ldi	r24, 0x2C	; 44
      fa:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
    mfrc522_write(TReloadReg_2, 0);	
      fe:	60 e0       	ldi	r22, 0x00	; 0
     100:	8d e2       	ldi	r24, 0x2D	; 45
     102:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
	mfrc522_write(TxASKReg, 0x40);	
     106:	60 e4       	ldi	r22, 0x40	; 64
     108:	85 e1       	ldi	r24, 0x15	; 21
     10a:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
	mfrc522_write(ModeReg, 0x3D);
     10e:	6d e3       	ldi	r22, 0x3D	; 61
     110:	81 e1       	ldi	r24, 0x11	; 17
     112:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
	
	// O kousek další
	mfrc522_write(RFCfgReg, (0x07<<4)); // Set Rx Gain to max
     116:	60 e7       	ldi	r22, 0x70	; 112
     118:	86 e2       	ldi	r24, 0x26	; 38
     11a:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
    // antenna on
	byte = mfrc522_read(TxControlReg);
     11e:	84 e1       	ldi	r24, 0x14	; 20
     120:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
	if(!(byte&0x03))
     124:	98 2f       	mov	r25, r24
     126:	93 70       	andi	r25, 0x03	; 3
     128:	29 f4       	brne	.+10     	; 0x134 <mfrc522_init+0x52>
	{
		mfrc522_write(TxControlReg,byte|0x03);
     12a:	68 2f       	mov	r22, r24
     12c:	63 60       	ori	r22, 0x03	; 3
     12e:	84 e1       	ldi	r24, 0x14	; 20
     130:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
     134:	08 95       	ret

00000136 <mfrc522_to_card>:

/*
send command to rc522 to card
*/
uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
     136:	3f 92       	push	r3
     138:	4f 92       	push	r4
     13a:	5f 92       	push	r5
     13c:	6f 92       	push	r6
     13e:	7f 92       	push	r7
     140:	8f 92       	push	r8
     142:	9f 92       	push	r9
     144:	af 92       	push	r10
     146:	bf 92       	push	r11
     148:	cf 92       	push	r12
     14a:	df 92       	push	r13
     14c:	ef 92       	push	r14
     14e:	ff 92       	push	r15
     150:	0f 93       	push	r16
     152:	1f 93       	push	r17
     154:	cf 93       	push	r28
     156:	df 93       	push	r29
     158:	48 2e       	mov	r4, r24
     15a:	e6 2e       	mov	r14, r22
     15c:	f7 2e       	mov	r15, r23
     15e:	84 2e       	mov	r8, r20
     160:	72 2e       	mov	r7, r18
     162:	63 2e       	mov	r6, r19
    uint8_t lastBits;
    uint8_t n;
    uint8_t	tmp;
    uint32_t i;

    switch (cmd)
     164:	8c e0       	ldi	r24, 0x0C	; 12
     166:	48 16       	cp	r4, r24
     168:	31 f0       	breq	.+12     	; 0x176 <mfrc522_to_card+0x40>
     16a:	ee e0       	ldi	r30, 0x0E	; 14
     16c:	4e 16       	cp	r4, r30
     16e:	61 f0       	breq	.+24     	; 0x188 <mfrc522_to_card+0x52>
*/
uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
    uint8_t waitIRq = 0x00;
     170:	51 2c       	mov	r5, r1
send command to rc522 to card
*/
uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
    uint8_t irqEn = 0x00;
     172:	31 2c       	mov	r3, r1
     174:	10 c0       	rjmp	.+32     	; 0x196 <mfrc522_to_card+0x60>
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
			waitIRq = 0x30;
     176:	0f 2e       	mov	r0, r31
     178:	f0 e3       	ldi	r31, 0x30	; 48
     17a:	5f 2e       	mov	r5, r31
     17c:	f0 2d       	mov	r31, r0
			waitIRq = 0x10;
			break;
		}
		case Transceive_CMD:	//Transmit FIFO data
		{
			irqEn = 0x77;
     17e:	0f 2e       	mov	r0, r31
     180:	f7 e7       	ldi	r31, 0x77	; 119
     182:	3f 2e       	mov	r3, r31
     184:	f0 2d       	mov	r31, r0
			waitIRq = 0x30;
			break;
     186:	07 c0       	rjmp	.+14     	; 0x196 <mfrc522_to_card+0x60>
    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
			waitIRq = 0x10;
     188:	68 94       	set
     18a:	55 24       	eor	r5, r5
     18c:	54 f8       	bld	r5, 4

    switch (cmd)
    {
        case MFAuthent_CMD:		//Certification cards close
		{
			irqEn = 0x12;
     18e:	0f 2e       	mov	r0, r31
     190:	f2 e1       	ldi	r31, 0x12	; 18
     192:	3f 2e       	mov	r3, r31
     194:	f0 2d       	mov	r31, r0
		default:
			break;
    }
   
    //mfrc522_write(ComIEnReg, irqEn|0x80);	//Interrupt request
    n=mfrc522_read(ComIrqReg);
     196:	84 e0       	ldi	r24, 0x04	; 4
     198:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
    mfrc522_write(ComIrqReg,n&(~0x80));//clear all interrupt bits
     19c:	68 2f       	mov	r22, r24
     19e:	6f 77       	andi	r22, 0x7F	; 127
     1a0:	84 e0       	ldi	r24, 0x04	; 4
     1a2:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
    n=mfrc522_read(FIFOLevelReg);
     1a6:	8a e0       	ldi	r24, 0x0A	; 10
     1a8:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
     1ac:	68 2f       	mov	r22, r24
     1ae:	60 68       	ori	r22, 0x80	; 128
     1b0:	8a e0       	ldi	r24, 0x0A	; 10
     1b2:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	81 e0       	ldi	r24, 0x01	; 1
     1ba:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
     1be:	91 2c       	mov	r9, r1
     1c0:	a1 2c       	mov	r10, r1
     1c2:	b1 2c       	mov	r11, r1
     1c4:	81 14       	cp	r8, r1
     1c6:	91 04       	cpc	r9, r1
     1c8:	a1 04       	cpc	r10, r1
     1ca:	b1 04       	cpc	r11, r1
     1cc:	99 f0       	breq	.+38     	; 0x1f4 <mfrc522_to_card+0xbe>
     1ce:	ce 2d       	mov	r28, r14
     1d0:	df 2d       	mov	r29, r15
     1d2:	c1 2c       	mov	r12, r1
     1d4:	d1 2c       	mov	r13, r1
     1d6:	76 01       	movw	r14, r12
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
     1d8:	69 91       	ld	r22, Y+
     1da:	89 e0       	ldi	r24, 0x09	; 9
     1dc:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
    mfrc522_write(FIFOLevelReg,n|0x80);//flush FIFO data
    
	mfrc522_write(CommandReg, Idle_CMD);	//NO action; Cancel the current cmd???

	//Writing data to the FIFO
    for (i=0; i<send_data_len; i++)
     1e0:	ff ef       	ldi	r31, 0xFF	; 255
     1e2:	cf 1a       	sub	r12, r31
     1e4:	df 0a       	sbc	r13, r31
     1e6:	ef 0a       	sbc	r14, r31
     1e8:	ff 0a       	sbc	r15, r31
     1ea:	c8 14       	cp	r12, r8
     1ec:	d9 04       	cpc	r13, r9
     1ee:	ea 04       	cpc	r14, r10
     1f0:	fb 04       	cpc	r15, r11
     1f2:	90 f3       	brcs	.-28     	; 0x1d8 <mfrc522_to_card+0xa2>
    {   
		mfrc522_write(FIFODataReg, send_data[i]);    
	}

	//Execute the cmd
	mfrc522_write(CommandReg, cmd);
     1f4:	64 2d       	mov	r22, r4
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
    if (cmd == Transceive_CMD)
     1fc:	8c e0       	ldi	r24, 0x0C	; 12
     1fe:	48 12       	cpse	r4, r24
     200:	08 c0       	rjmp	.+16     	; 0x212 <mfrc522_to_card+0xdc>
    {    
		n=mfrc522_read(BitFramingReg);
     202:	8d e0       	ldi	r24, 0x0D	; 13
     204:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
		mfrc522_write(BitFramingReg,n|0x80);  
     208:	68 2f       	mov	r22, r24
     20a:	60 68       	ori	r22, 0x80	; 128
     20c:	8d e0       	ldi	r24, 0x0D	; 13
     20e:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
	i = 2000;	//i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms???
    do 
    {
		//CommIrqReg[7..0]
		//Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
        n = mfrc522_read(ComIrqReg);
     212:	84 e0       	ldi	r24, 0x04	; 4
     214:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
     218:	f8 2e       	mov	r15, r24
     21a:	c0 e0       	ldi	r28, 0x00	; 0
     21c:	d0 e0       	ldi	r29, 0x00	; 0
     21e:	e5 2d       	mov	r30, r5
     220:	e1 60       	ori	r30, 0x01	; 1
     222:	5e 2e       	mov	r5, r30
     224:	0a c0       	rjmp	.+20     	; 0x23a <mfrc522_to_card+0x104>
     226:	84 e0       	ldi	r24, 0x04	; 4
     228:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
     22c:	f8 2e       	mov	r15, r24
     22e:	21 96       	adiw	r28, 0x01	; 1
        i--;
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));
     230:	cf 3c       	cpi	r28, 0xCF	; 207
     232:	f7 e0       	ldi	r31, 0x07	; 7
     234:	df 07       	cpc	r29, r31
     236:	09 f4       	brne	.+2      	; 0x23a <mfrc522_to_card+0x104>
     238:	75 c0       	rjmp	.+234    	; 0x324 <mfrc522_to_card+0x1ee>
     23a:	8f 2d       	mov	r24, r15
     23c:	85 21       	and	r24, r5
     23e:	99 f3       	breq	.-26     	; 0x226 <mfrc522_to_card+0xf0>
     240:	7b c0       	rjmp	.+246    	; 0x338 <mfrc522_to_card+0x202>
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
            if (n & irqEn & 0x01)
     242:	83 2d       	mov	r24, r3
     244:	81 70       	andi	r24, 0x01	; 1
     246:	f8 22       	and	r15, r24
     248:	11 f4       	brne	.+4      	; 0x24e <mfrc522_to_card+0x118>
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
        {
            status = CARD_FOUND;
     24a:	c1 e0       	ldi	r28, 0x01	; 1
     24c:	01 c0       	rjmp	.+2      	; 0x250 <mfrc522_to_card+0x11a>
            if (n & irqEn & 0x01)
            {   
				status = CARD_NOT_FOUND;			//??   
     24e:	c2 e0       	ldi	r28, 0x02	; 2
			}

            if (cmd == Transceive_CMD)
     250:	8c e0       	ldi	r24, 0x0C	; 12
     252:	48 12       	cpse	r4, r24
     254:	80 c0       	rjmp	.+256    	; 0x356 <mfrc522_to_card+0x220>
            {
               	n = mfrc522_read(FIFOLevelReg);
     256:	8a e0       	ldi	r24, 0x0A	; 10
     258:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
     25c:	88 2e       	mov	r8, r24
              	lastBits = mfrc522_read(ControlReg) & 0x07;
     25e:	8c e0       	ldi	r24, 0x0C	; 12
     260:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
     264:	28 2f       	mov	r18, r24
     266:	27 70       	andi	r18, 0x07	; 7
                if (lastBits)
     268:	e9 f0       	breq	.+58     	; 0x2a4 <mfrc522_to_card+0x16e>
                {   
					*back_data_len = (uint32_t)(n-1)*8 + (uint32_t)lastBits;   
     26a:	88 2d       	mov	r24, r8
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	01 97       	sbiw	r24, 0x01	; 1
     270:	aa 27       	eor	r26, r26
     272:	97 fd       	sbrc	r25, 7
     274:	a0 95       	com	r26
     276:	ba 2f       	mov	r27, r26
     278:	88 0f       	add	r24, r24
     27a:	99 1f       	adc	r25, r25
     27c:	aa 1f       	adc	r26, r26
     27e:	bb 1f       	adc	r27, r27
     280:	88 0f       	add	r24, r24
     282:	99 1f       	adc	r25, r25
     284:	aa 1f       	adc	r26, r26
     286:	bb 1f       	adc	r27, r27
     288:	88 0f       	add	r24, r24
     28a:	99 1f       	adc	r25, r25
     28c:	aa 1f       	adc	r26, r26
     28e:	bb 1f       	adc	r27, r27
     290:	82 0f       	add	r24, r18
     292:	91 1d       	adc	r25, r1
     294:	a1 1d       	adc	r26, r1
     296:	b1 1d       	adc	r27, r1
     298:	f8 01       	movw	r30, r16
     29a:	80 83       	st	Z, r24
     29c:	91 83       	std	Z+1, r25	; 0x01
     29e:	a2 83       	std	Z+2, r26	; 0x02
     2a0:	b3 83       	std	Z+3, r27	; 0x03
     2a2:	15 c0       	rjmp	.+42     	; 0x2ce <mfrc522_to_card+0x198>
				}
                else
                {   
					*back_data_len = (uint32_t)n*8;   
     2a4:	48 2d       	mov	r20, r8
     2a6:	50 e0       	ldi	r21, 0x00	; 0
     2a8:	60 e0       	ldi	r22, 0x00	; 0
     2aa:	70 e0       	ldi	r23, 0x00	; 0
     2ac:	44 0f       	add	r20, r20
     2ae:	55 1f       	adc	r21, r21
     2b0:	66 1f       	adc	r22, r22
     2b2:	77 1f       	adc	r23, r23
     2b4:	44 0f       	add	r20, r20
     2b6:	55 1f       	adc	r21, r21
     2b8:	66 1f       	adc	r22, r22
     2ba:	77 1f       	adc	r23, r23
     2bc:	44 0f       	add	r20, r20
     2be:	55 1f       	adc	r21, r21
     2c0:	66 1f       	adc	r22, r22
     2c2:	77 1f       	adc	r23, r23
     2c4:	f8 01       	movw	r30, r16
     2c6:	40 83       	st	Z, r20
     2c8:	51 83       	std	Z+1, r21	; 0x01
     2ca:	62 83       	std	Z+2, r22	; 0x02
     2cc:	73 83       	std	Z+3, r23	; 0x03
				}

                if (n == 0)
     2ce:	81 10       	cpse	r8, r1
     2d0:	0a c0       	rjmp	.+20     	; 0x2e6 <mfrc522_to_card+0x1b0>
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
     2d2:	81 2c       	mov	r8, r1
     2d4:	91 2c       	mov	r9, r1
     2d6:	54 01       	movw	r10, r8
     2d8:	83 94       	inc	r8
     2da:	07 2d       	mov	r16, r7
     2dc:	16 2d       	mov	r17, r6
     2de:	c1 2c       	mov	r12, r1
     2e0:	d1 2c       	mov	r13, r1
     2e2:	76 01       	movw	r14, r12
     2e4:	0e c0       	rjmp	.+28     	; 0x302 <mfrc522_to_card+0x1cc>
     2e6:	88 2d       	mov	r24, r8
     2e8:	81 31       	cpi	r24, 0x11	; 17
     2ea:	08 f0       	brcs	.+2      	; 0x2ee <mfrc522_to_card+0x1b8>
     2ec:	80 e1       	ldi	r24, 0x10	; 16
     2ee:	88 2e       	mov	r8, r24
     2f0:	91 2c       	mov	r9, r1
     2f2:	a1 2c       	mov	r10, r1
     2f4:	b1 2c       	mov	r11, r1
     2f6:	81 14       	cp	r8, r1
     2f8:	91 04       	cpc	r9, r1
     2fa:	a1 04       	cpc	r10, r1
     2fc:	b1 04       	cpc	r11, r1
     2fe:	69 f7       	brne	.-38     	; 0x2da <mfrc522_to_card+0x1a4>
     300:	2a c0       	rjmp	.+84     	; 0x356 <mfrc522_to_card+0x220>
                {   
					back_data[i] = mfrc522_read(FIFODataReg);    
     302:	89 e0       	ldi	r24, 0x09	; 9
     304:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
     308:	f8 01       	movw	r30, r16
     30a:	81 93       	st	Z+, r24
     30c:	8f 01       	movw	r16, r30
                {   
					n = MAX_LEN;   
				}
				
				//Reading the received data in FIFO
                for (i=0; i<n; i++)
     30e:	ff ef       	ldi	r31, 0xFF	; 255
     310:	cf 1a       	sub	r12, r31
     312:	df 0a       	sbc	r13, r31
     314:	ef 0a       	sbc	r14, r31
     316:	ff 0a       	sbc	r15, r31
     318:	c8 14       	cp	r12, r8
     31a:	d9 04       	cpc	r13, r9
     31c:	ea 04       	cpc	r14, r10
     31e:	fb 04       	cpc	r15, r11
     320:	80 f3       	brcs	.-32     	; 0x302 <mfrc522_to_card+0x1cc>
     322:	19 c0       	rjmp	.+50     	; 0x356 <mfrc522_to_card+0x220>
        n = mfrc522_read(ComIrqReg);
        i--;
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg);
     324:	8d e0       	ldi	r24, 0x0D	; 13
     326:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
     32a:	68 2f       	mov	r22, r24
     32c:	6f 77       	andi	r22, 0x7F	; 127
     32e:	8d e0       	ldi	r24, 0x0D	; 13
     330:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
/*
send command to rc522 to card
*/
uint8_t mfrc522_to_card(uint8_t cmd, uint8_t *send_data, uint8_t send_data_len, uint8_t *back_data, uint32_t *back_data_len)
{
	uint8_t status = ERROR;
     334:	c3 e0       	ldi	r28, 0x03	; 3
     336:	0f c0       	rjmp	.+30     	; 0x356 <mfrc522_to_card+0x220>
        n = mfrc522_read(ComIrqReg);
        i--;
    }
    while ((i!=0) && !(n&0x01) && !(n&waitIRq));

	tmp=mfrc522_read(BitFramingReg);
     338:	8d e0       	ldi	r24, 0x0D	; 13
     33a:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
	mfrc522_write(BitFramingReg,tmp&(~0x80));
     33e:	68 2f       	mov	r22, r24
     340:	6f 77       	andi	r22, 0x7F	; 127
     342:	8d e0       	ldi	r24, 0x0D	; 13
     344:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
	
    if (i != 0)
    {    
        if(!(mfrc522_read(ErrorReg) & 0x1B))	//BufferOvfl Collerr CRCErr ProtecolErr
     348:	86 e0       	ldi	r24, 0x06	; 6
     34a:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
     34e:	8b 71       	andi	r24, 0x1B	; 27
     350:	09 f4       	brne	.+2      	; 0x354 <mfrc522_to_card+0x21e>
     352:	77 cf       	rjmp	.-274    	; 0x242 <mfrc522_to_card+0x10c>
				}
            }
        }
        else
        {   
			status = ERROR;  
     354:	c3 e0       	ldi	r28, 0x03	; 3
	
    //SetBitMask(ControlReg,0x80);           //timer stops
    //mfrc522_write(cmdReg, PCD_IDLE); 

    return status;
}
     356:	8c 2f       	mov	r24, r28
     358:	df 91       	pop	r29
     35a:	cf 91       	pop	r28
     35c:	1f 91       	pop	r17
     35e:	0f 91       	pop	r16
     360:	ff 90       	pop	r15
     362:	ef 90       	pop	r14
     364:	df 90       	pop	r13
     366:	cf 90       	pop	r12
     368:	bf 90       	pop	r11
     36a:	af 90       	pop	r10
     36c:	9f 90       	pop	r9
     36e:	8f 90       	pop	r8
     370:	7f 90       	pop	r7
     372:	6f 90       	pop	r6
     374:	5f 90       	pop	r5
     376:	4f 90       	pop	r4
     378:	3f 90       	pop	r3
     37a:	08 95       	ret

0000037c <mfrc522_request>:

/*
make command request to rc522
*/
uint8_t	mfrc522_request(uint8_t req_mode, uint8_t * tag_type)
{
     37c:	ef 92       	push	r14
     37e:	ff 92       	push	r15
     380:	0f 93       	push	r16
     382:	1f 93       	push	r17
     384:	cf 93       	push	r28
     386:	df 93       	push	r29
     388:	00 d0       	rcall	.+0      	; 0x38a <mfrc522_request+0xe>
     38a:	00 d0       	rcall	.+0      	; 0x38c <mfrc522_request+0x10>
     38c:	cd b7       	in	r28, 0x3d	; 61
     38e:	de b7       	in	r29, 0x3e	; 62
     390:	18 2f       	mov	r17, r24
     392:	7b 01       	movw	r14, r22
	uint8_t  status;  
	uint32_t backBits;//The received data bits

	mfrc522_write(BitFramingReg, 0x07);//TxLastBists = BitFramingReg[2..0]	???
     394:	67 e0       	ldi	r22, 0x07	; 7
     396:	8d e0       	ldi	r24, 0x0D	; 13
     398:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
	
	tag_type[0] = req_mode;
     39c:	f7 01       	movw	r30, r14
     39e:	10 83       	st	Z, r17
	status = mfrc522_to_card(Transceive_CMD, tag_type, 1, tag_type, &backBits);
     3a0:	8e 01       	movw	r16, r28
     3a2:	0f 5f       	subi	r16, 0xFF	; 255
     3a4:	1f 4f       	sbci	r17, 0xFF	; 255
     3a6:	97 01       	movw	r18, r14
     3a8:	41 e0       	ldi	r20, 0x01	; 1
     3aa:	b7 01       	movw	r22, r14
     3ac:	8c e0       	ldi	r24, 0x0C	; 12
     3ae:	0e 94 9b 00 	call	0x136	; 0x136 <mfrc522_to_card>

	if ((status != CARD_FOUND) || (backBits != 0x10))
     3b2:	81 30       	cpi	r24, 0x01	; 1
     3b4:	51 f4       	brne	.+20     	; 0x3ca <mfrc522_request+0x4e>
     3b6:	49 81       	ldd	r20, Y+1	; 0x01
     3b8:	5a 81       	ldd	r21, Y+2	; 0x02
     3ba:	6b 81       	ldd	r22, Y+3	; 0x03
     3bc:	7c 81       	ldd	r23, Y+4	; 0x04
     3be:	40 31       	cpi	r20, 0x10	; 16
     3c0:	51 05       	cpc	r21, r1
     3c2:	61 05       	cpc	r22, r1
     3c4:	71 05       	cpc	r23, r1
     3c6:	19 f4       	brne	.+6      	; 0x3ce <mfrc522_request+0x52>
     3c8:	03 c0       	rjmp	.+6      	; 0x3d0 <mfrc522_request+0x54>
	{    
		status = ERROR;
     3ca:	83 e0       	ldi	r24, 0x03	; 3
     3cc:	01 c0       	rjmp	.+2      	; 0x3d0 <mfrc522_request+0x54>
     3ce:	83 e0       	ldi	r24, 0x03	; 3
	}
   
	return status;
}
     3d0:	0f 90       	pop	r0
     3d2:	0f 90       	pop	r0
     3d4:	0f 90       	pop	r0
     3d6:	0f 90       	pop	r0
     3d8:	df 91       	pop	r29
     3da:	cf 91       	pop	r28
     3dc:	1f 91       	pop	r17
     3de:	0f 91       	pop	r16
     3e0:	ff 90       	pop	r15
     3e2:	ef 90       	pop	r14
     3e4:	08 95       	ret

000003e6 <mfrc522_get_card_serial>:

/*
get card serial
*/
uint8_t mfrc522_get_card_serial(uint8_t * serial_out)
{
     3e6:	ef 92       	push	r14
     3e8:	ff 92       	push	r15
     3ea:	0f 93       	push	r16
     3ec:	1f 93       	push	r17
     3ee:	cf 93       	push	r28
     3f0:	df 93       	push	r29
     3f2:	00 d0       	rcall	.+0      	; 0x3f4 <mfrc522_get_card_serial+0xe>
     3f4:	00 d0       	rcall	.+0      	; 0x3f6 <mfrc522_get_card_serial+0x10>
     3f6:	cd b7       	in	r28, 0x3d	; 61
     3f8:	de b7       	in	r29, 0x3e	; 62
     3fa:	7c 01       	movw	r14, r24
	uint8_t status;
    uint8_t i;
	uint8_t serNumCheck=0;
    uint32_t unLen;
    
	mfrc522_write(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
     3fc:	60 e0       	ldi	r22, 0x00	; 0
     3fe:	8d e0       	ldi	r24, 0x0D	; 13
     400:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
 
    serial_out[0] = PICC_ANTICOLL;
     404:	83 e9       	ldi	r24, 0x93	; 147
     406:	f7 01       	movw	r30, r14
     408:	80 83       	st	Z, r24
    serial_out[1] = 0x20;
     40a:	80 e2       	ldi	r24, 0x20	; 32
     40c:	81 83       	std	Z+1, r24	; 0x01
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);
     40e:	8e 01       	movw	r16, r28
     410:	0f 5f       	subi	r16, 0xFF	; 255
     412:	1f 4f       	sbci	r17, 0xFF	; 255
     414:	97 01       	movw	r18, r14
     416:	42 e0       	ldi	r20, 0x02	; 2
     418:	b7 01       	movw	r22, r14
     41a:	8c e0       	ldi	r24, 0x0C	; 12
     41c:	0e 94 9b 00 	call	0x136	; 0x136 <mfrc522_to_card>

    if (status == CARD_FOUND)
     420:	81 30       	cpi	r24, 0x01	; 1
     422:	61 f4       	brne	.+24     	; 0x43c <mfrc522_get_card_serial+0x56>
     424:	f7 01       	movw	r30, r14
     426:	20 e0       	ldi	r18, 0x00	; 0
     428:	90 e0       	ldi	r25, 0x00	; 0
	{
		//Check card serial number
		for (i=0; i<4; i++)
		{   
		 	serNumCheck ^= serial_out[i];
     42a:	31 91       	ld	r19, Z+
     42c:	23 27       	eor	r18, r19
    status = mfrc522_to_card(Transceive_CMD, serial_out, 2, serial_out, &unLen);

    if (status == CARD_FOUND)
	{
		//Check card serial number
		for (i=0; i<4; i++)
     42e:	9f 5f       	subi	r25, 0xFF	; 255
     430:	94 30       	cpi	r25, 0x04	; 4
     432:	d9 f7       	brne	.-10     	; 0x42a <mfrc522_get_card_serial+0x44>
		{   
		 	serNumCheck ^= serial_out[i];
		}
		if (serNumCheck != serial_out[i])
     434:	f7 01       	movw	r30, r14
     436:	94 81       	ldd	r25, Z+4	; 0x04
     438:	29 13       	cpse	r18, r25
		{   
			status = ERROR;    
     43a:	83 e0       	ldi	r24, 0x03	; 3
		}
    }
    return status;
}
     43c:	0f 90       	pop	r0
     43e:	0f 90       	pop	r0
     440:	0f 90       	pop	r0
     442:	0f 90       	pop	r0
     444:	df 91       	pop	r29
     446:	cf 91       	pop	r28
     448:	1f 91       	pop	r17
     44a:	0f 91       	pop	r16
     44c:	ff 90       	pop	r15
     44e:	ef 90       	pop	r14
     450:	08 95       	ret

00000452 <mfrc522_setBitMask>:

/*
set bit mask
*/
void mfrc522_setBitMask(uint8_t reg, uint8_t mask)
{
     452:	cf 93       	push	r28
     454:	df 93       	push	r29
     456:	c8 2f       	mov	r28, r24
     458:	d6 2f       	mov	r29, r22
	uint8_t tmp;
	tmp = mfrc522_read(reg);
     45a:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
	mfrc522_write(reg, tmp | mask);  // set bit mask
     45e:	68 2f       	mov	r22, r24
     460:	6d 2b       	or	r22, r29
     462:	8c 2f       	mov	r24, r28
     464:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
}
     468:	df 91       	pop	r29
     46a:	cf 91       	pop	r28
     46c:	08 95       	ret

0000046e <mfrc522_clearBitMask>:

/*
clear bit mask
*/
void mfrc522_clearBitMask(uint8_t reg, uint8_t mask)
{
     46e:	cf 93       	push	r28
     470:	df 93       	push	r29
     472:	c8 2f       	mov	r28, r24
     474:	d6 2f       	mov	r29, r22
	uint8_t tmp;
	tmp = mfrc522_read(reg);
     476:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
	mfrc522_write(reg, tmp & (~mask));  // clear bit mask
     47a:	d0 95       	com	r29
     47c:	68 2f       	mov	r22, r24
     47e:	6d 23       	and	r22, r29
     480:	8c 2f       	mov	r24, r28
     482:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
}
     486:	df 91       	pop	r29
     488:	cf 91       	pop	r28
     48a:	08 95       	ret

0000048c <mfrc522_calculateCRC>:

/*
calculate crc using rc522 chip
*/
void mfrc522_calculateCRC(uint8_t *pIndata, uint8_t len, uint8_t *pOutData)
{
     48c:	df 92       	push	r13
     48e:	ef 92       	push	r14
     490:	ff 92       	push	r15
     492:	0f 93       	push	r16
     494:	1f 93       	push	r17
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	d8 2e       	mov	r13, r24
     49c:	f9 2e       	mov	r15, r25
     49e:	e6 2e       	mov	r14, r22
     4a0:	8a 01       	movw	r16, r20
	uint8_t i, n;

	mfrc522_clearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
     4a2:	64 e0       	ldi	r22, 0x04	; 4
     4a4:	85 e0       	ldi	r24, 0x05	; 5
     4a6:	0e 94 37 02 	call	0x46e	; 0x46e <mfrc522_clearBitMask>
	mfrc522_setBitMask(FIFOLevelReg, 0x80);			//Claro puntero FIFO
     4aa:	60 e8       	ldi	r22, 0x80	; 128
     4ac:	8a e0       	ldi	r24, 0x0A	; 10
     4ae:	0e 94 29 02 	call	0x452	; 0x452 <mfrc522_setBitMask>
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Escribir datos en el FIFO
	for (i=0; i<len; i++)
     4b2:	ee 20       	and	r14, r14
     4b4:	51 f0       	breq	.+20     	; 0x4ca <mfrc522_calculateCRC+0x3e>
     4b6:	cd 2d       	mov	r28, r13
     4b8:	df 2d       	mov	r29, r15
     4ba:	f1 2c       	mov	r15, r1
	{
		mfrc522_write(FIFODataReg, *(pIndata+i));
     4bc:	69 91       	ld	r22, Y+
     4be:	89 e0       	ldi	r24, 0x09	; 9
     4c0:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>
	mfrc522_clearBitMask(DivIrqReg, 0x04);			//CRCIrq = 0
	mfrc522_setBitMask(FIFOLevelReg, 0x80);			//Claro puntero FIFO
	//Write_MFRC522(CommandReg, PCD_IDLE);

	//Escribir datos en el FIFO
	for (i=0; i<len; i++)
     4c4:	f3 94       	inc	r15
     4c6:	fe 10       	cpse	r15, r14
     4c8:	f9 cf       	rjmp	.-14     	; 0x4bc <mfrc522_calculateCRC+0x30>
	{
		mfrc522_write(FIFODataReg, *(pIndata+i));
	}
	mfrc522_write(CommandReg, PCD_CALCCRC);
     4ca:	63 e0       	ldi	r22, 0x03	; 3
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	0e 94 54 00 	call	0xa8	; 0xa8 <mfrc522_write>

	// Esperar a la finalizaci??n de c??lculo del CRC
	i = 0xFF;
	do
	{
		n = mfrc522_read(DivIrqReg);
     4d2:	85 e0       	ldi	r24, 0x05	; 5
     4d4:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
     4d8:	ce ef       	ldi	r28, 0xFE	; 254
     4da:	05 c0       	rjmp	.+10     	; 0x4e6 <mfrc522_calculateCRC+0x5a>
     4dc:	85 e0       	ldi	r24, 0x05	; 5
     4de:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
     4e2:	c1 50       	subi	r28, 0x01	; 1
		i--;
	}
	while ((i!=0) && !(n&0x04));			//CRCIrq = 1
     4e4:	11 f0       	breq	.+4      	; 0x4ea <mfrc522_calculateCRC+0x5e>
     4e6:	82 ff       	sbrs	r24, 2
     4e8:	f9 cf       	rjmp	.-14     	; 0x4dc <mfrc522_calculateCRC+0x50>

	//Lea el c??lculo de CRC
	pOutData[0] = mfrc522_read(CRCResultReg_2);
     4ea:	82 e2       	ldi	r24, 0x22	; 34
     4ec:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
     4f0:	f8 01       	movw	r30, r16
     4f2:	80 83       	st	Z, r24
	pOutData[1] = mfrc522_read(CRCResultReg_1);
     4f4:	81 e2       	ldi	r24, 0x21	; 33
     4f6:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
     4fa:	f8 01       	movw	r30, r16
     4fc:	81 83       	std	Z+1, r24	; 0x01
}
     4fe:	df 91       	pop	r29
     500:	cf 91       	pop	r28
     502:	1f 91       	pop	r17
     504:	0f 91       	pop	r16
     506:	ff 90       	pop	r15
     508:	ef 90       	pop	r14
     50a:	df 90       	pop	r13
     50c:	08 95       	ret

0000050e <mfrc522_halt>:

/*
halt the card (release it to be able to read again)
*/
uint8_t mfrc522_halt()
{
     50e:	0f 93       	push	r16
     510:	1f 93       	push	r17
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	cd b7       	in	r28, 0x3d	; 61
     518:	de b7       	in	r29, 0x3e	; 62
     51a:	28 97       	sbiw	r28, 0x08	; 8
     51c:	0f b6       	in	r0, 0x3f	; 63
     51e:	f8 94       	cli
     520:	de bf       	out	0x3e, r29	; 62
     522:	0f be       	out	0x3f, r0	; 63
     524:	cd bf       	out	0x3d, r28	; 61
	uint8_t status;
	uint32_t unLen;
	uint8_t buff[4];

	buff[0] = PICC_HALT;
     526:	80 e5       	ldi	r24, 0x50	; 80
     528:	8d 83       	std	Y+5, r24	; 0x05
	buff[1] = 0;
     52a:	1e 82       	std	Y+6, r1	; 0x06
	mfrc522_calculateCRC(buff, 2, &buff[2]);
     52c:	ae 01       	movw	r20, r28
     52e:	49 5f       	subi	r20, 0xF9	; 249
     530:	5f 4f       	sbci	r21, 0xFF	; 255
     532:	62 e0       	ldi	r22, 0x02	; 2
     534:	ce 01       	movw	r24, r28
     536:	05 96       	adiw	r24, 0x05	; 5
     538:	0e 94 46 02 	call	0x48c	; 0x48c <mfrc522_calculateCRC>

	mfrc522_clearBitMask(Status2Reg, 0x08); // turn off encryption
     53c:	68 e0       	ldi	r22, 0x08	; 8
     53e:	88 e0       	ldi	r24, 0x08	; 8
     540:	0e 94 37 02 	call	0x46e	; 0x46e <mfrc522_clearBitMask>

	status = mfrc522_to_card(Transceive_CMD, buff, 4, buff,&unLen);
     544:	8e 01       	movw	r16, r28
     546:	0f 5f       	subi	r16, 0xFF	; 255
     548:	1f 4f       	sbci	r17, 0xFF	; 255
     54a:	9e 01       	movw	r18, r28
     54c:	2b 5f       	subi	r18, 0xFB	; 251
     54e:	3f 4f       	sbci	r19, 0xFF	; 255
     550:	44 e0       	ldi	r20, 0x04	; 4
     552:	b9 01       	movw	r22, r18
     554:	8c e0       	ldi	r24, 0x0C	; 12
     556:	0e 94 9b 00 	call	0x136	; 0x136 <mfrc522_to_card>
	
	return status;
}
     55a:	28 96       	adiw	r28, 0x08	; 8
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	de bf       	out	0x3e, r29	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	cd bf       	out	0x3d, r28	; 61
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	1f 91       	pop	r17
     56c:	0f 91       	pop	r16
     56e:	08 95       	ret

00000570 <mfrc522_is_card>:

/*
check if card is in range
*/
uint8_t mfrc522_is_card(uint16_t *card_type)
{
     570:	0f 93       	push	r16
     572:	1f 93       	push	r17
     574:	cf 93       	push	r28
     576:	df 93       	push	r29
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
     57c:	60 97       	sbiw	r28, 0x10	; 16
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	f8 94       	cli
     582:	de bf       	out	0x3e, r29	; 62
     584:	0f be       	out	0x3f, r0	; 63
     586:	cd bf       	out	0x3d, r28	; 61
     588:	8c 01       	movw	r16, r24
	uint8_t buff_data[MAX_LEN],
    status = mfrc522_request(PICC_REQIDL,buff_data);     
     58a:	be 01       	movw	r22, r28
     58c:	6f 5f       	subi	r22, 0xFF	; 255
     58e:	7f 4f       	sbci	r23, 0xFF	; 255
     590:	86 e2       	ldi	r24, 0x26	; 38
     592:	0e 94 be 01 	call	0x37c	; 0x37c <mfrc522_request>
    if(status == CARD_FOUND){
     596:	81 30       	cpi	r24, 0x01	; 1
     598:	61 f4       	brne	.+24     	; 0x5b2 <mfrc522_is_card+0x42>
        *card_type = (buff_data[0]<<8)+buff_data[1];
     59a:	89 81       	ldd	r24, Y+1	; 0x01
     59c:	90 e0       	ldi	r25, 0x00	; 0
     59e:	98 2f       	mov	r25, r24
     5a0:	88 27       	eor	r24, r24
     5a2:	2a 81       	ldd	r18, Y+2	; 0x02
     5a4:	82 0f       	add	r24, r18
     5a6:	91 1d       	adc	r25, r1
     5a8:	f8 01       	movw	r30, r16
     5aa:	91 83       	std	Z+1, r25	; 0x01
     5ac:	80 83       	st	Z, r24
        return 1;
     5ae:	81 e0       	ldi	r24, 0x01	; 1
     5b0:	01 c0       	rjmp	.+2      	; 0x5b4 <mfrc522_is_card+0x44>
    }
    else{
        return 0;    
     5b2:	80 e0       	ldi	r24, 0x00	; 0
    }
}
     5b4:	60 96       	adiw	r28, 0x10	; 16
     5b6:	0f b6       	in	r0, 0x3f	; 63
     5b8:	f8 94       	cli
     5ba:	de bf       	out	0x3e, r29	; 62
     5bc:	0f be       	out	0x3f, r0	; 63
     5be:	cd bf       	out	0x3d, r28	; 61
     5c0:	df 91       	pop	r29
     5c2:	cf 91       	pop	r28
     5c4:	1f 91       	pop	r17
     5c6:	0f 91       	pop	r16
     5c8:	08 95       	ret

000005ca <mfrc522_auth>:
             Sectorkey - Sector password
             serNum - card serial number, 4-byte
 * Return value: the successful return CARD_FOUND
 */
uint8_t mfrc522_auth(uint8_t authMode, uint8_t BlockAddr, uint8_t *Sectorkey, uint8_t *serNum)
{
     5ca:	0f 93       	push	r16
     5cc:	1f 93       	push	r17
     5ce:	cf 93       	push	r28
     5d0:	df 93       	push	r29
     5d2:	cd b7       	in	r28, 0x3d	; 61
     5d4:	de b7       	in	r29, 0x3e	; 62
     5d6:	60 97       	sbiw	r28, 0x10	; 16
     5d8:	0f b6       	in	r0, 0x3f	; 63
     5da:	f8 94       	cli
     5dc:	de bf       	out	0x3e, r29	; 62
     5de:	0f be       	out	0x3f, r0	; 63
     5e0:	cd bf       	out	0x3d, r28	; 61
    uint32_t recvBits;
    uint8_t i;
	uint8_t buff[12]; 

    // Validate instruction block address + sector + password + card serial number
    buff[0] = authMode;
     5e2:	8d 83       	std	Y+5, r24	; 0x05
    buff[1] = BlockAddr;
     5e4:	6e 83       	std	Y+6, r22	; 0x06
     5e6:	a4 2f       	mov	r26, r20
     5e8:	b5 2f       	mov	r27, r21
     5ea:	fe 01       	movw	r30, r28
     5ec:	37 96       	adiw	r30, 0x07	; 7
     5ee:	ce 01       	movw	r24, r28
     5f0:	0d 96       	adiw	r24, 0x0d	; 13
    for (i=0; i<6; i++)
    {    
		buff[i+2] = *(Sectorkey+i);   
     5f2:	4d 91       	ld	r20, X+
     5f4:	41 93       	st	Z+, r20
	uint8_t buff[12]; 

    // Validate instruction block address + sector + password + card serial number
    buff[0] = authMode;
    buff[1] = BlockAddr;
    for (i=0; i<6; i++)
     5f6:	e8 17       	cp	r30, r24
     5f8:	f9 07       	cpc	r31, r25
     5fa:	d9 f7       	brne	.-10     	; 0x5f2 <mfrc522_auth+0x28>
     5fc:	a2 2f       	mov	r26, r18
     5fe:	b3 2f       	mov	r27, r19
     600:	fe 01       	movw	r30, r28
     602:	3d 96       	adiw	r30, 0x0d	; 13
     604:	85 e0       	ldi	r24, 0x05	; 5
     606:	90 e0       	ldi	r25, 0x00	; 0
     608:	8c 0f       	add	r24, r28
     60a:	9d 1f       	adc	r25, r29
     60c:	0c 96       	adiw	r24, 0x0c	; 12
    {    
		buff[i+2] = *(Sectorkey+i);   
	}
    for (i=0; i<4; i++)
    {    
		buff[i+8] = *(serNum+i);   
     60e:	2d 91       	ld	r18, X+
     610:	21 93       	st	Z+, r18
    buff[1] = BlockAddr;
    for (i=0; i<6; i++)
    {    
		buff[i+2] = *(Sectorkey+i);   
	}
    for (i=0; i<4; i++)
     612:	e8 17       	cp	r30, r24
     614:	f9 07       	cpc	r31, r25
     616:	d9 f7       	brne	.-10     	; 0x60e <mfrc522_auth+0x44>
    {    
		buff[i+8] = *(serNum+i);   
	}
	
    status = mfrc522_to_card(PCD_AUTHENT, buff, 12, buff, &recvBits); 
     618:	8e 01       	movw	r16, r28
     61a:	0f 5f       	subi	r16, 0xFF	; 255
     61c:	1f 4f       	sbci	r17, 0xFF	; 255
     61e:	9e 01       	movw	r18, r28
     620:	2b 5f       	subi	r18, 0xFB	; 251
     622:	3f 4f       	sbci	r19, 0xFF	; 255
     624:	4c e0       	ldi	r20, 0x0C	; 12
     626:	b9 01       	movw	r22, r18
     628:	8e e0       	ldi	r24, 0x0E	; 14
     62a:	0e 94 9b 00 	call	0x136	; 0x136 <mfrc522_to_card>
     62e:	18 2f       	mov	r17, r24
    i = mfrc522_read(Status1Reg);
     630:	87 e0       	ldi	r24, 0x07	; 7
     632:	0e 94 61 00 	call	0xc2	; 0xc2 <mfrc522_read>
    
    if ((status != CARD_FOUND) || (!(i & 0x08)))
     636:	11 30       	cpi	r17, 0x01	; 1
     638:	19 f4       	brne	.+6      	; 0x640 <mfrc522_auth+0x76>
     63a:	83 ff       	sbrs	r24, 3
     63c:	03 c0       	rjmp	.+6      	; 0x644 <mfrc522_auth+0x7a>
     63e:	03 c0       	rjmp	.+6      	; 0x646 <mfrc522_auth+0x7c>
    {   
		status = ERROR;   
     640:	13 e0       	ldi	r17, 0x03	; 3
     642:	01 c0       	rjmp	.+2      	; 0x646 <mfrc522_auth+0x7c>
     644:	13 e0       	ldi	r17, 0x03	; 3
	}
    
    return status;
}
     646:	81 2f       	mov	r24, r17
     648:	60 96       	adiw	r28, 0x10	; 16
     64a:	0f b6       	in	r0, 0x3f	; 63
     64c:	f8 94       	cli
     64e:	de bf       	out	0x3e, r29	; 62
     650:	0f be       	out	0x3f, r0	; 63
     652:	cd bf       	out	0x3d, r28	; 61
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	08 95       	ret

0000065e <spi_init>:


#if SPI_CONFIG_AS_MASTER
void spi_init()
{
	SPI_DDR = (1<<SPI_MOSI) | (1<<SPI_SCK) | (1<<SPI_SS);
     65e:	80 eb       	ldi	r24, 0xB0	; 176
     660:	87 bb       	out	0x17, r24	; 23
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);//prescaler 16
     662:	81 e5       	ldi	r24, 0x51	; 81
     664:	8d b9       	out	0x0d, r24	; 13
     666:	08 95       	ret

00000668 <spi_transmit>:
}


uint8_t spi_transmit(uint8_t data)
{
	SPDR = data;
     668:	8f b9       	out	0x0f, r24	; 15
	while(!(SPSR & (1<<SPIF)));
     66a:	77 9b       	sbis	0x0e, 7	; 14
     66c:	fe cf       	rjmp	.-4      	; 0x66a <spi_transmit+0x2>
	
	return SPDR;
     66e:	8f b1       	in	r24, 0x0f	; 15
}
     670:	08 95       	ret

00000672 <timer_init>:

  // * Timer 1 - system timer and 2× PWM
  // 14745600 / 256 / 576 = 100 Hz
  //   Xtal  /presca/ TOP
  
  OCR1A = 0;
     672:	1b bc       	out	0x2b, r1	; 43
     674:	1a bc       	out	0x2a, r1	; 42
  OCR1B = 0;
     676:	19 bc       	out	0x29, r1	; 41
     678:	18 bc       	out	0x28, r1	; 40
  ICR1 = 575; 
     67a:	8f e3       	ldi	r24, 0x3F	; 63
     67c:	92 e0       	ldi	r25, 0x02	; 2
     67e:	97 bd       	out	0x27, r25	; 39
     680:	86 bd       	out	0x26, r24	; 38
  TCCR1A = BV(WGM11) | BV(COM1A1) | BV(COM1B1); // Fast PWM
     682:	82 ea       	ldi	r24, 0xA2	; 162
     684:	8f bd       	out	0x2f, r24	; 47
  TCCR1B = BV(WGM12) | BV(WGM13) | 4; // Fast PWM + presca = 1024
     686:	8c e1       	ldi	r24, 0x1C	; 28
     688:	8e bd       	out	0x2e, r24	; 46
  TIMSK |= BV(TICIE1); // capt int enabled
     68a:	89 b7       	in	r24, 0x39	; 57
     68c:	80 62       	ori	r24, 0x20	; 32
     68e:	89 bf       	out	0x39, r24	; 57
     690:	08 95       	ret

00000692 <TB_Send>:
     692:	e0 91 68 00 	lds	r30, 0x0068
     696:	f0 91 69 00 	lds	r31, 0x0069
     69a:	30 97       	sbiw	r30, 0x00	; 0
     69c:	09 f0       	breq	.+2      	; 0x6a0 <TB_Send+0xe>
     69e:	09 95       	icall
     6a0:	08 95       	ret

000006a2 <TB_calcSum>:
     6a2:	e9 e9       	ldi	r30, 0x99	; 153
     6a4:	f0 e0       	ldi	r31, 0x00	; 0
     6a6:	81 ea       	ldi	r24, 0xA1	; 161
     6a8:	90 e0       	ldi	r25, 0x00	; 0
     6aa:	20 e0       	ldi	r18, 0x00	; 0
     6ac:	31 91       	ld	r19, Z+
     6ae:	23 0f       	add	r18, r19
     6b0:	e8 17       	cp	r30, r24
     6b2:	f9 07       	cpc	r31, r25
     6b4:	d9 f7       	brne	.-10     	; 0x6ac <TB_calcSum+0xa>
     6b6:	20 93 a1 00 	sts	0x00A1, r18
     6ba:	08 95       	ret

000006bc <TB_Init>:
     6bc:	cf 93       	push	r28
     6be:	df 93       	push	r29
     6c0:	ec 01       	movw	r28, r24
     6c2:	90 93 b3 00 	sts	0x00B3, r25
     6c6:	80 93 b2 00 	sts	0x00B2, r24
     6ca:	45 e0       	ldi	r20, 0x05	; 5
     6cc:	50 e0       	ldi	r21, 0x00	; 0
     6ce:	bc 01       	movw	r22, r24
     6d0:	82 ea       	ldi	r24, 0xA2	; 162
     6d2:	90 e0       	ldi	r25, 0x00	; 0
     6d4:	0e 94 37 0a 	call	0x146e	; 0x146e <__eerd_block_m32>
     6d8:	80 91 a2 00 	lds	r24, 0x00A2
     6dc:	81 34       	cpi	r24, 0x41	; 65
     6de:	a9 f0       	breq	.+42     	; 0x70a <TB_Init+0x4e>
     6e0:	82 e4       	ldi	r24, 0x42	; 66
     6e2:	80 93 a2 00 	sts	0x00A2, r24
     6e6:	84 e0       	ldi	r24, 0x04	; 4
     6e8:	80 93 a3 00 	sts	0x00A3, r24
     6ec:	83 e0       	ldi	r24, 0x03	; 3
     6ee:	80 93 a4 00 	sts	0x00A4, r24
     6f2:	10 92 a5 00 	sts	0x00A5, r1
     6f6:	82 e0       	ldi	r24, 0x02	; 2
     6f8:	80 93 a6 00 	sts	0x00A6, r24
     6fc:	45 e0       	ldi	r20, 0x05	; 5
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	be 01       	movw	r22, r28
     702:	82 ea       	ldi	r24, 0xA2	; 162
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <__eewr_block_m32>
     70a:	e0 91 66 00 	lds	r30, 0x0066
     70e:	f0 91 67 00 	lds	r31, 0x0067
     712:	30 97       	sbiw	r30, 0x00	; 0
     714:	19 f0       	breq	.+6      	; 0x71c <TB_Init+0x60>
     716:	80 91 a3 00 	lds	r24, 0x00A3
     71a:	09 95       	icall
     71c:	80 91 a6 00 	lds	r24, 0x00A6
     720:	80 93 b4 00 	sts	0x00B4, r24
     724:	80 91 a4 00 	lds	r24, 0x00A4
     728:	80 93 a8 00 	sts	0x00A8, r24
     72c:	df 91       	pop	r29
     72e:	cf 91       	pop	r28
     730:	08 95       	ret

00000732 <TB_SendAck>:
     732:	90 91 b4 00 	lds	r25, 0x00B4
     736:	90 93 99 00 	sts	0x0099, r25
     73a:	90 91 a8 00 	lds	r25, 0x00A8
     73e:	90 93 9a 00 	sts	0x009A, r25
     742:	80 93 9b 00 	sts	0x009B, r24
     746:	80 91 aa 00 	lds	r24, 0x00AA
     74a:	80 93 9c 00 	sts	0x009C, r24
     74e:	70 93 9d 00 	sts	0x009D, r23
     752:	60 93 9e 00 	sts	0x009E, r22
     756:	50 93 9f 00 	sts	0x009F, r21
     75a:	40 93 a0 00 	sts	0x00A0, r20
     75e:	0e 94 51 03 	call	0x6a2	; 0x6a2 <TB_calcSum>
     762:	0e 94 49 03 	call	0x692	; 0x692 <TB_Send>
     766:	08 95       	ret

00000768 <TB_Read>:
     768:	90 91 a9 00 	lds	r25, 0x00A9
     76c:	80 91 a8 00 	lds	r24, 0x00A8
     770:	98 13       	cpse	r25, r24
     772:	16 c0       	rjmp	.+44     	; 0x7a0 <TB_Read+0x38>
     774:	e9 ea       	ldi	r30, 0xA9	; 169
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	81 eb       	ldi	r24, 0xB1	; 177
     77a:	90 e0       	ldi	r25, 0x00	; 0
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	31 91       	ld	r19, Z+
     780:	23 0f       	add	r18, r19
     782:	e8 17       	cp	r30, r24
     784:	f9 07       	cpc	r31, r25
     786:	d9 f7       	brne	.-10     	; 0x77e <TB_Read+0x16>
     788:	80 91 b1 00 	lds	r24, 0x00B1
     78c:	28 17       	cp	r18, r24
     78e:	51 f0       	breq	.+20     	; 0x7a4 <TB_Read+0x3c>
     790:	40 e0       	ldi	r20, 0x00	; 0
     792:	50 e0       	ldi	r21, 0x00	; 0
     794:	ba 01       	movw	r22, r20
     796:	81 e0       	ldi	r24, 0x01	; 1
     798:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     79c:	83 e0       	ldi	r24, 0x03	; 3
     79e:	08 95       	ret
     7a0:	82 e0       	ldi	r24, 0x02	; 2
     7a2:	08 95       	ret
     7a4:	80 e0       	ldi	r24, 0x00	; 0
     7a6:	08 95       	ret

000007a8 <TB_Decode>:
     7a8:	0f 93       	push	r16
     7aa:	1f 93       	push	r17
     7ac:	cf 93       	push	r28
     7ae:	df 93       	push	r29
     7b0:	1f 92       	push	r1
     7b2:	cd b7       	in	r28, 0x3d	; 61
     7b4:	de b7       	in	r29, 0x3e	; 62
     7b6:	20 91 ad 00 	lds	r18, 0x00AD
     7ba:	60 91 ae 00 	lds	r22, 0x00AE
     7be:	86 2f       	mov	r24, r22
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	a0 e0       	ldi	r26, 0x00	; 0
     7c4:	b0 e0       	ldi	r27, 0x00	; 0
     7c6:	dc 01       	movw	r26, r24
     7c8:	99 27       	eor	r25, r25
     7ca:	88 27       	eor	r24, r24
     7cc:	b2 2b       	or	r27, r18
     7ce:	20 91 b0 00 	lds	r18, 0x00B0
     7d2:	82 2b       	or	r24, r18
     7d4:	20 91 af 00 	lds	r18, 0x00AF
     7d8:	bc 01       	movw	r22, r24
     7da:	cd 01       	movw	r24, r26
     7dc:	72 2b       	or	r23, r18
     7de:	60 93 95 00 	sts	0x0095, r22
     7e2:	70 93 96 00 	sts	0x0096, r23
     7e6:	80 93 97 00 	sts	0x0097, r24
     7ea:	90 93 98 00 	sts	0x0098, r25
     7ee:	20 91 aa 00 	lds	r18, 0x00AA
     7f2:	2a 30       	cpi	r18, 0x0A	; 10
     7f4:	09 f4       	brne	.+2      	; 0x7f8 <TB_Decode+0x50>
     7f6:	86 c2       	rjmp	.+1292   	; 0xd04 <__stack+0x4a5>
     7f8:	88 f4       	brcc	.+34     	; 0x81c <TB_Decode+0x74>
     7fa:	24 30       	cpi	r18, 0x04	; 4
     7fc:	09 f4       	brne	.+2      	; 0x800 <TB_Decode+0x58>
     7fe:	fc c2       	rjmp	.+1528   	; 0xdf8 <__stack+0x599>
     800:	28 f4       	brcc	.+10     	; 0x80c <TB_Decode+0x64>
     802:	21 30       	cpi	r18, 0x01	; 1
     804:	19 f1       	breq	.+70     	; 0x84c <TB_Decode+0xa4>
     806:	22 30       	cpi	r18, 0x02	; 2
     808:	49 f1       	breq	.+82     	; 0x85c <TB_Decode+0xb4>
     80a:	ee c2       	rjmp	.+1500   	; 0xde8 <__stack+0x589>
     80c:	26 30       	cpi	r18, 0x06	; 6
     80e:	09 f4       	brne	.+2      	; 0x812 <TB_Decode+0x6a>
     810:	76 c0       	rjmp	.+236    	; 0x8fe <__stack+0x9f>
     812:	60 f1       	brcs	.+88     	; 0x86c <__stack+0xd>
     814:	29 30       	cpi	r18, 0x09	; 9
     816:	09 f4       	brne	.+2      	; 0x81a <TB_Decode+0x72>
     818:	d3 c1       	rjmp	.+934    	; 0xbc0 <__stack+0x361>
     81a:	e6 c2       	rjmp	.+1484   	; 0xde8 <__stack+0x589>
     81c:	20 31       	cpi	r18, 0x10	; 16
     81e:	09 f4       	brne	.+2      	; 0x822 <TB_Decode+0x7a>
     820:	c9 c1       	rjmp	.+914    	; 0xbb4 <__stack+0x355>
     822:	48 f4       	brcc	.+18     	; 0x836 <TB_Decode+0x8e>
     824:	2e 30       	cpi	r18, 0x0E	; 14
     826:	09 f4       	brne	.+2      	; 0x82a <TB_Decode+0x82>
     828:	ec c0       	rjmp	.+472    	; 0xa02 <__stack+0x1a3>
     82a:	08 f0       	brcs	.+2      	; 0x82e <TB_Decode+0x86>
     82c:	4f c1       	rjmp	.+670    	; 0xacc <__stack+0x26d>
     82e:	2d 30       	cpi	r18, 0x0D	; 13
     830:	09 f4       	brne	.+2      	; 0x834 <TB_Decode+0x8c>
     832:	c4 c1       	rjmp	.+904    	; 0xbbc <__stack+0x35d>
     834:	d9 c2       	rjmp	.+1458   	; 0xde8 <__stack+0x589>
     836:	28 38       	cpi	r18, 0x88	; 136
     838:	09 f4       	brne	.+2      	; 0x83c <TB_Decode+0x94>
     83a:	ad c2       	rjmp	.+1370   	; 0xd96 <__stack+0x537>
     83c:	2e 3f       	cpi	r18, 0xFE	; 254
     83e:	21 f0       	breq	.+8      	; 0x848 <TB_Decode+0xa0>
     840:	21 31       	cpi	r18, 0x11	; 17
     842:	09 f0       	breq	.+2      	; 0x846 <TB_Decode+0x9e>
     844:	d1 c2       	rjmp	.+1442   	; 0xde8 <__stack+0x589>
     846:	b8 c1       	rjmp	.+880    	; 0xbb8 <__stack+0x359>
     848:	8e ef       	ldi	r24, 0xFE	; 254
     84a:	db c2       	rjmp	.+1462   	; 0xe02 <__stack+0x5a3>
     84c:	40 e0       	ldi	r20, 0x00	; 0
     84e:	50 e0       	ldi	r21, 0x00	; 0
     850:	ba 01       	movw	r22, r20
     852:	84 e6       	ldi	r24, 0x64	; 100
     854:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     858:	81 e0       	ldi	r24, 0x01	; 1
     85a:	d3 c2       	rjmp	.+1446   	; 0xe02 <__stack+0x5a3>
     85c:	40 e0       	ldi	r20, 0x00	; 0
     85e:	50 e0       	ldi	r21, 0x00	; 0
     860:	ba 01       	movw	r22, r20
     862:	84 e6       	ldi	r24, 0x64	; 100
     864:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     868:	82 e0       	ldi	r24, 0x02	; 2
     86a:	cb c2       	rjmp	.+1430   	; 0xe02 <__stack+0x5a3>
     86c:	20 91 ac 00 	lds	r18, 0x00AC
     870:	22 23       	and	r18, r18
     872:	41 f0       	breq	.+16     	; 0x884 <__stack+0x25>
     874:	40 e0       	ldi	r20, 0x00	; 0
     876:	50 e0       	ldi	r21, 0x00	; 0
     878:	ba 01       	movw	r22, r20
     87a:	84 e0       	ldi	r24, 0x04	; 4
     87c:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     880:	80 e0       	ldi	r24, 0x00	; 0
     882:	bf c2       	rjmp	.+1406   	; 0xe02 <__stack+0x5a3>
     884:	20 91 ab 00 	lds	r18, 0x00AB
     888:	26 30       	cpi	r18, 0x06	; 6
     88a:	e9 f0       	breq	.+58     	; 0x8c6 <__stack+0x67>
     88c:	28 f4       	brcc	.+10     	; 0x898 <__stack+0x39>
     88e:	24 30       	cpi	r18, 0x04	; 4
     890:	41 f0       	breq	.+16     	; 0x8a2 <__stack+0x43>
     892:	25 30       	cpi	r18, 0x05	; 5
     894:	79 f0       	breq	.+30     	; 0x8b4 <__stack+0x55>
     896:	2b c0       	rjmp	.+86     	; 0x8ee <__stack+0x8f>
     898:	27 30       	cpi	r18, 0x07	; 7
     89a:	f1 f0       	breq	.+60     	; 0x8d8 <__stack+0x79>
     89c:	2c 38       	cpi	r18, 0x8C	; 140
     89e:	29 f1       	breq	.+74     	; 0x8ea <__stack+0x8b>
     8a0:	26 c0       	rjmp	.+76     	; 0x8ee <__stack+0x8f>
     8a2:	60 93 80 00 	sts	0x0080, r22
     8a6:	70 93 81 00 	sts	0x0081, r23
     8aa:	80 93 82 00 	sts	0x0082, r24
     8ae:	90 93 83 00 	sts	0x0083, r25
     8b2:	1d c0       	rjmp	.+58     	; 0x8ee <__stack+0x8f>
     8b4:	60 93 84 00 	sts	0x0084, r22
     8b8:	70 93 85 00 	sts	0x0085, r23
     8bc:	80 93 86 00 	sts	0x0086, r24
     8c0:	90 93 87 00 	sts	0x0087, r25
     8c4:	14 c0       	rjmp	.+40     	; 0x8ee <__stack+0x8f>
     8c6:	60 93 88 00 	sts	0x0088, r22
     8ca:	70 93 89 00 	sts	0x0089, r23
     8ce:	80 93 8a 00 	sts	0x008A, r24
     8d2:	90 93 8b 00 	sts	0x008B, r25
     8d6:	0b c0       	rjmp	.+22     	; 0x8ee <__stack+0x8f>
     8d8:	60 93 8c 00 	sts	0x008C, r22
     8dc:	70 93 8d 00 	sts	0x008D, r23
     8e0:	80 93 8e 00 	sts	0x008E, r24
     8e4:	90 93 8f 00 	sts	0x008F, r25
     8e8:	02 c0       	rjmp	.+4      	; 0x8ee <__stack+0x8f>
     8ea:	60 93 90 00 	sts	0x0090, r22
     8ee:	40 e0       	ldi	r20, 0x00	; 0
     8f0:	50 e0       	ldi	r21, 0x00	; 0
     8f2:	ba 01       	movw	r22, r20
     8f4:	84 e6       	ldi	r24, 0x64	; 100
     8f6:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     8fa:	80 e0       	ldi	r24, 0x00	; 0
     8fc:	82 c2       	rjmp	.+1284   	; 0xe02 <__stack+0x5a3>
     8fe:	80 91 ac 00 	lds	r24, 0x00AC
     902:	88 23       	and	r24, r24
     904:	41 f0       	breq	.+16     	; 0x916 <__stack+0xb7>
     906:	40 e0       	ldi	r20, 0x00	; 0
     908:	50 e0       	ldi	r21, 0x00	; 0
     90a:	ba 01       	movw	r22, r20
     90c:	84 e0       	ldi	r24, 0x04	; 4
     90e:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     912:	80 e0       	ldi	r24, 0x00	; 0
     914:	76 c2       	rjmp	.+1260   	; 0xe02 <__stack+0x5a3>
     916:	80 91 ab 00 	lds	r24, 0x00AB
     91a:	86 30       	cpi	r24, 0x06	; 6
     91c:	61 f1       	breq	.+88     	; 0x976 <__stack+0x117>
     91e:	38 f4       	brcc	.+14     	; 0x92e <__stack+0xcf>
     920:	84 30       	cpi	r24, 0x04	; 4
     922:	09 f4       	brne	.+2      	; 0x926 <__stack+0xc7>
     924:	42 c0       	rjmp	.+132    	; 0x9aa <__stack+0x14b>
     926:	d0 f4       	brcc	.+52     	; 0x95c <__stack+0xfd>
     928:	81 30       	cpi	r24, 0x01	; 1
     92a:	59 f0       	breq	.+22     	; 0x942 <__stack+0xe3>
     92c:	62 c0       	rjmp	.+196    	; 0x9f2 <__stack+0x193>
     92e:	8c 38       	cpi	r24, 0x8C	; 140
     930:	09 f4       	brne	.+2      	; 0x934 <__stack+0xd5>
     932:	48 c0       	rjmp	.+144    	; 0x9c4 <__stack+0x165>
     934:	84 3c       	cpi	r24, 0xC4	; 196
     936:	09 f4       	brne	.+2      	; 0x93a <__stack+0xdb>
     938:	4f c0       	rjmp	.+158    	; 0x9d8 <__stack+0x179>
     93a:	87 30       	cpi	r24, 0x07	; 7
     93c:	09 f0       	breq	.+2      	; 0x940 <__stack+0xe1>
     93e:	59 c0       	rjmp	.+178    	; 0x9f2 <__stack+0x193>
     940:	27 c0       	rjmp	.+78     	; 0x990 <__stack+0x131>
     942:	40 91 7c 00 	lds	r20, 0x007C
     946:	50 91 7d 00 	lds	r21, 0x007D
     94a:	60 91 7e 00 	lds	r22, 0x007E
     94e:	70 91 7f 00 	lds	r23, 0x007F
     952:	84 e6       	ldi	r24, 0x64	; 100
     954:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     958:	80 e0       	ldi	r24, 0x00	; 0
     95a:	53 c2       	rjmp	.+1190   	; 0xe02 <__stack+0x5a3>
     95c:	40 91 84 00 	lds	r20, 0x0084
     960:	50 91 85 00 	lds	r21, 0x0085
     964:	60 91 86 00 	lds	r22, 0x0086
     968:	70 91 87 00 	lds	r23, 0x0087
     96c:	84 e6       	ldi	r24, 0x64	; 100
     96e:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     972:	80 e0       	ldi	r24, 0x00	; 0
     974:	46 c2       	rjmp	.+1164   	; 0xe02 <__stack+0x5a3>
     976:	40 91 88 00 	lds	r20, 0x0088
     97a:	50 91 89 00 	lds	r21, 0x0089
     97e:	60 91 8a 00 	lds	r22, 0x008A
     982:	70 91 8b 00 	lds	r23, 0x008B
     986:	84 e6       	ldi	r24, 0x64	; 100
     988:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     98c:	80 e0       	ldi	r24, 0x00	; 0
     98e:	39 c2       	rjmp	.+1138   	; 0xe02 <__stack+0x5a3>
     990:	40 91 8c 00 	lds	r20, 0x008C
     994:	50 91 8d 00 	lds	r21, 0x008D
     998:	60 91 8e 00 	lds	r22, 0x008E
     99c:	70 91 8f 00 	lds	r23, 0x008F
     9a0:	84 e6       	ldi	r24, 0x64	; 100
     9a2:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	2c c2       	rjmp	.+1112   	; 0xe02 <__stack+0x5a3>
     9aa:	40 91 80 00 	lds	r20, 0x0080
     9ae:	50 91 81 00 	lds	r21, 0x0081
     9b2:	60 91 82 00 	lds	r22, 0x0082
     9b6:	70 91 83 00 	lds	r23, 0x0083
     9ba:	84 e6       	ldi	r24, 0x64	; 100
     9bc:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     9c0:	80 e0       	ldi	r24, 0x00	; 0
     9c2:	1f c2       	rjmp	.+1086   	; 0xe02 <__stack+0x5a3>
     9c4:	40 91 90 00 	lds	r20, 0x0090
     9c8:	50 e0       	ldi	r21, 0x00	; 0
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	70 e0       	ldi	r23, 0x00	; 0
     9ce:	84 e6       	ldi	r24, 0x64	; 100
     9d0:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     9d4:	80 e0       	ldi	r24, 0x00	; 0
     9d6:	15 c2       	rjmp	.+1066   	; 0xe02 <__stack+0x5a3>
     9d8:	40 91 91 00 	lds	r20, 0x0091
     9dc:	50 91 92 00 	lds	r21, 0x0092
     9e0:	60 91 93 00 	lds	r22, 0x0093
     9e4:	70 91 94 00 	lds	r23, 0x0094
     9e8:	84 e6       	ldi	r24, 0x64	; 100
     9ea:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     9ee:	80 e0       	ldi	r24, 0x00	; 0
     9f0:	08 c2       	rjmp	.+1040   	; 0xe02 <__stack+0x5a3>
     9f2:	40 e0       	ldi	r20, 0x00	; 0
     9f4:	50 e0       	ldi	r21, 0x00	; 0
     9f6:	ba 01       	movw	r22, r20
     9f8:	84 e0       	ldi	r24, 0x04	; 4
     9fa:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	00 c2       	rjmp	.+1024   	; 0xe02 <__stack+0x5a3>
     a02:	20 91 ac 00 	lds	r18, 0x00AC
     a06:	21 30       	cpi	r18, 0x01	; 1
     a08:	09 f4       	brne	.+2      	; 0xa0c <__stack+0x1ad>
     a0a:	f8 c1       	rjmp	.+1008   	; 0xdfc <__stack+0x59d>
     a0c:	18 f0       	brcs	.+6      	; 0xa14 <__stack+0x1b5>
     a0e:	22 30       	cpi	r18, 0x02	; 2
     a10:	49 f0       	breq	.+18     	; 0xa24 <__stack+0x1c5>
     a12:	54 c0       	rjmp	.+168    	; 0xabc <__stack+0x25d>
     a14:	40 e0       	ldi	r20, 0x00	; 0
     a16:	50 e0       	ldi	r21, 0x00	; 0
     a18:	ba 01       	movw	r22, r20
     a1a:	83 e0       	ldi	r24, 0x03	; 3
     a1c:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     a20:	8e e0       	ldi	r24, 0x0E	; 14
     a22:	ef c1       	rjmp	.+990    	; 0xe02 <__stack+0x5a3>
     a24:	20 91 ab 00 	lds	r18, 0x00AB
     a28:	21 30       	cpi	r18, 0x01	; 1
     a2a:	c1 f0       	breq	.+48     	; 0xa5c <__stack+0x1fd>
     a2c:	18 f0       	brcs	.+6      	; 0xa34 <__stack+0x1d5>
     a2e:	22 30       	cpi	r18, 0x02	; 2
     a30:	49 f1       	breq	.+82     	; 0xa84 <__stack+0x225>
     a32:	3c c0       	rjmp	.+120    	; 0xaac <__stack+0x24d>
     a34:	21 e0       	ldi	r18, 0x01	; 1
     a36:	67 2b       	or	r22, r23
     a38:	68 2b       	or	r22, r24
     a3a:	69 2b       	or	r22, r25
     a3c:	09 f4       	brne	.+2      	; 0xa40 <__stack+0x1e1>
     a3e:	20 e0       	ldi	r18, 0x00	; 0
     a40:	80 91 77 00 	lds	r24, 0x0077
     a44:	20 fb       	bst	r18, 0
     a46:	80 f9       	bld	r24, 0
     a48:	80 93 77 00 	sts	0x0077, r24
     a4c:	40 e0       	ldi	r20, 0x00	; 0
     a4e:	50 e0       	ldi	r21, 0x00	; 0
     a50:	ba 01       	movw	r22, r20
     a52:	84 e6       	ldi	r24, 0x64	; 100
     a54:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     a58:	8e e0       	ldi	r24, 0x0E	; 14
     a5a:	d3 c1       	rjmp	.+934    	; 0xe02 <__stack+0x5a3>
     a5c:	21 e0       	ldi	r18, 0x01	; 1
     a5e:	67 2b       	or	r22, r23
     a60:	68 2b       	or	r22, r24
     a62:	69 2b       	or	r22, r25
     a64:	09 f4       	brne	.+2      	; 0xa68 <__stack+0x209>
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	80 91 77 00 	lds	r24, 0x0077
     a6c:	20 fb       	bst	r18, 0
     a6e:	81 f9       	bld	r24, 1
     a70:	80 93 77 00 	sts	0x0077, r24
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	50 e0       	ldi	r21, 0x00	; 0
     a78:	ba 01       	movw	r22, r20
     a7a:	84 e6       	ldi	r24, 0x64	; 100
     a7c:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     a80:	8e e0       	ldi	r24, 0x0E	; 14
     a82:	bf c1       	rjmp	.+894    	; 0xe02 <__stack+0x5a3>
     a84:	21 e0       	ldi	r18, 0x01	; 1
     a86:	67 2b       	or	r22, r23
     a88:	68 2b       	or	r22, r24
     a8a:	69 2b       	or	r22, r25
     a8c:	09 f4       	brne	.+2      	; 0xa90 <__stack+0x231>
     a8e:	20 e0       	ldi	r18, 0x00	; 0
     a90:	80 91 77 00 	lds	r24, 0x0077
     a94:	20 fb       	bst	r18, 0
     a96:	82 f9       	bld	r24, 2
     a98:	80 93 77 00 	sts	0x0077, r24
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	ba 01       	movw	r22, r20
     aa2:	84 e6       	ldi	r24, 0x64	; 100
     aa4:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     aa8:	8e e0       	ldi	r24, 0x0E	; 14
     aaa:	ab c1       	rjmp	.+854    	; 0xe02 <__stack+0x5a3>
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	ba 01       	movw	r22, r20
     ab2:	83 e0       	ldi	r24, 0x03	; 3
     ab4:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     ab8:	8e e0       	ldi	r24, 0x0E	; 14
     aba:	a3 c1       	rjmp	.+838    	; 0xe02 <__stack+0x5a3>
     abc:	40 e0       	ldi	r20, 0x00	; 0
     abe:	50 e0       	ldi	r21, 0x00	; 0
     ac0:	ba 01       	movw	r22, r20
     ac2:	83 e0       	ldi	r24, 0x03	; 3
     ac4:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     ac8:	8e e0       	ldi	r24, 0x0E	; 14
     aca:	9b c1       	rjmp	.+822    	; 0xe02 <__stack+0x5a3>
     acc:	80 91 ac 00 	lds	r24, 0x00AC
     ad0:	81 30       	cpi	r24, 0x01	; 1
     ad2:	29 f0       	breq	.+10     	; 0xade <__stack+0x27f>
     ad4:	30 f0       	brcs	.+12     	; 0xae2 <__stack+0x283>
     ad6:	82 30       	cpi	r24, 0x02	; 2
     ad8:	09 f4       	brne	.+2      	; 0xadc <__stack+0x27d>
     ada:	46 c0       	rjmp	.+140    	; 0xb68 <__stack+0x309>
     adc:	91 c1       	rjmp	.+802    	; 0xe00 <__stack+0x5a1>
     ade:	8f e0       	ldi	r24, 0x0F	; 15
     ae0:	90 c1       	rjmp	.+800    	; 0xe02 <__stack+0x5a3>
     ae2:	80 91 ab 00 	lds	r24, 0x00AB
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	89 f0       	breq	.+34     	; 0xb0c <__stack+0x2ad>
     aea:	28 f0       	brcs	.+10     	; 0xaf6 <__stack+0x297>
     aec:	82 30       	cpi	r24, 0x02	; 2
     aee:	d1 f0       	breq	.+52     	; 0xb24 <__stack+0x2c5>
     af0:	83 30       	cpi	r24, 0x03	; 3
     af2:	29 f1       	breq	.+74     	; 0xb3e <__stack+0x2df>
     af4:	31 c0       	rjmp	.+98     	; 0xb58 <__stack+0x2f9>
     af6:	40 91 a7 00 	lds	r20, 0x00A7
     afa:	41 70       	andi	r20, 0x01	; 1
     afc:	50 e0       	ldi	r21, 0x00	; 0
     afe:	60 e0       	ldi	r22, 0x00	; 0
     b00:	70 e0       	ldi	r23, 0x00	; 0
     b02:	84 e6       	ldi	r24, 0x64	; 100
     b04:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     b08:	80 e0       	ldi	r24, 0x00	; 0
     b0a:	7b c1       	rjmp	.+758    	; 0xe02 <__stack+0x5a3>
     b0c:	40 91 a7 00 	lds	r20, 0x00A7
     b10:	46 95       	lsr	r20
     b12:	41 70       	andi	r20, 0x01	; 1
     b14:	50 e0       	ldi	r21, 0x00	; 0
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	70 e0       	ldi	r23, 0x00	; 0
     b1a:	84 e6       	ldi	r24, 0x64	; 100
     b1c:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     b20:	80 e0       	ldi	r24, 0x00	; 0
     b22:	6f c1       	rjmp	.+734    	; 0xe02 <__stack+0x5a3>
     b24:	40 91 a7 00 	lds	r20, 0x00A7
     b28:	42 fb       	bst	r20, 2
     b2a:	44 27       	eor	r20, r20
     b2c:	40 f9       	bld	r20, 0
     b2e:	50 e0       	ldi	r21, 0x00	; 0
     b30:	60 e0       	ldi	r22, 0x00	; 0
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	84 e6       	ldi	r24, 0x64	; 100
     b36:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     b3a:	80 e0       	ldi	r24, 0x00	; 0
     b3c:	62 c1       	rjmp	.+708    	; 0xe02 <__stack+0x5a3>
     b3e:	40 91 a7 00 	lds	r20, 0x00A7
     b42:	43 fb       	bst	r20, 3
     b44:	44 27       	eor	r20, r20
     b46:	40 f9       	bld	r20, 0
     b48:	50 e0       	ldi	r21, 0x00	; 0
     b4a:	60 e0       	ldi	r22, 0x00	; 0
     b4c:	70 e0       	ldi	r23, 0x00	; 0
     b4e:	84 e6       	ldi	r24, 0x64	; 100
     b50:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	55 c1       	rjmp	.+682    	; 0xe02 <__stack+0x5a3>
     b58:	40 e0       	ldi	r20, 0x00	; 0
     b5a:	50 e0       	ldi	r21, 0x00	; 0
     b5c:	ba 01       	movw	r22, r20
     b5e:	84 e0       	ldi	r24, 0x04	; 4
     b60:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     b64:	80 e0       	ldi	r24, 0x00	; 0
     b66:	4d c1       	rjmp	.+666    	; 0xe02 <__stack+0x5a3>
     b68:	80 91 ab 00 	lds	r24, 0x00AB
     b6c:	88 23       	and	r24, r24
     b6e:	19 f0       	breq	.+6      	; 0xb76 <__stack+0x317>
     b70:	81 30       	cpi	r24, 0x01	; 1
     b72:	61 f0       	breq	.+24     	; 0xb8c <__stack+0x32d>
     b74:	17 c0       	rjmp	.+46     	; 0xba4 <__stack+0x345>
     b76:	40 91 77 00 	lds	r20, 0x0077
     b7a:	41 70       	andi	r20, 0x01	; 1
     b7c:	50 e0       	ldi	r21, 0x00	; 0
     b7e:	60 e0       	ldi	r22, 0x00	; 0
     b80:	70 e0       	ldi	r23, 0x00	; 0
     b82:	84 e6       	ldi	r24, 0x64	; 100
     b84:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     b88:	80 e0       	ldi	r24, 0x00	; 0
     b8a:	3b c1       	rjmp	.+630    	; 0xe02 <__stack+0x5a3>
     b8c:	40 91 77 00 	lds	r20, 0x0077
     b90:	46 95       	lsr	r20
     b92:	41 70       	andi	r20, 0x01	; 1
     b94:	50 e0       	ldi	r21, 0x00	; 0
     b96:	60 e0       	ldi	r22, 0x00	; 0
     b98:	70 e0       	ldi	r23, 0x00	; 0
     b9a:	84 e6       	ldi	r24, 0x64	; 100
     b9c:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	2f c1       	rjmp	.+606    	; 0xe02 <__stack+0x5a3>
     ba4:	40 e0       	ldi	r20, 0x00	; 0
     ba6:	50 e0       	ldi	r21, 0x00	; 0
     ba8:	ba 01       	movw	r22, r20
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     bb0:	80 e0       	ldi	r24, 0x00	; 0
     bb2:	27 c1       	rjmp	.+590    	; 0xe02 <__stack+0x5a3>
     bb4:	80 e1       	ldi	r24, 0x10	; 16
     bb6:	25 c1       	rjmp	.+586    	; 0xe02 <__stack+0x5a3>
     bb8:	81 e1       	ldi	r24, 0x11	; 17
     bba:	23 c1       	rjmp	.+582    	; 0xe02 <__stack+0x5a3>
     bbc:	8d e0       	ldi	r24, 0x0D	; 13
     bbe:	21 c1       	rjmp	.+578    	; 0xe02 <__stack+0x5a3>
     bc0:	20 91 ac 00 	lds	r18, 0x00AC
     bc4:	22 23       	and	r18, r18
     bc6:	41 f0       	breq	.+16     	; 0xbd8 <__stack+0x379>
     bc8:	40 e0       	ldi	r20, 0x00	; 0
     bca:	50 e0       	ldi	r21, 0x00	; 0
     bcc:	ba 01       	movw	r22, r20
     bce:	84 e0       	ldi	r24, 0x04	; 4
     bd0:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     bd4:	80 e0       	ldi	r24, 0x00	; 0
     bd6:	15 c1       	rjmp	.+554    	; 0xe02 <__stack+0x5a3>
     bd8:	20 91 ab 00 	lds	r18, 0x00AB
     bdc:	21 34       	cpi	r18, 0x41	; 65
     bde:	51 f1       	breq	.+84     	; 0xc34 <__stack+0x3d5>
     be0:	18 f4       	brcc	.+6      	; 0xbe8 <__stack+0x389>
     be2:	20 34       	cpi	r18, 0x40	; 64
     be4:	41 f0       	breq	.+16     	; 0xbf6 <__stack+0x397>
     be6:	86 c0       	rjmp	.+268    	; 0xcf4 <__stack+0x495>
     be8:	22 34       	cpi	r18, 0x42	; 66
     bea:	09 f4       	brne	.+2      	; 0xbee <__stack+0x38f>
     bec:	43 c0       	rjmp	.+134    	; 0xc74 <__stack+0x415>
     bee:	2c 34       	cpi	r18, 0x4C	; 76
     bf0:	09 f4       	brne	.+2      	; 0xbf4 <__stack+0x395>
     bf2:	60 c0       	rjmp	.+192    	; 0xcb4 <__stack+0x455>
     bf4:	7f c0       	rjmp	.+254    	; 0xcf4 <__stack+0x495>
     bf6:	00 91 a2 00 	lds	r16, 0x00A2
     bfa:	10 e0       	ldi	r17, 0x00	; 0
     bfc:	20 e0       	ldi	r18, 0x00	; 0
     bfe:	30 e0       	ldi	r19, 0x00	; 0
     c00:	60 17       	cp	r22, r16
     c02:	71 07       	cpc	r23, r17
     c04:	82 07       	cpc	r24, r18
     c06:	93 07       	cpc	r25, r19
     c08:	69 f0       	breq	.+26     	; 0xc24 <__stack+0x3c5>
     c0a:	60 93 a2 00 	sts	0x00A2, r22
     c0e:	19 82       	std	Y+1, r1	; 0x01
     c10:	49 81       	ldd	r20, Y+1	; 0x01
     c12:	20 91 b2 00 	lds	r18, 0x00B2
     c16:	30 91 b3 00 	lds	r19, 0x00B3
     c1a:	c9 01       	movw	r24, r18
     c1c:	84 0f       	add	r24, r20
     c1e:	91 1d       	adc	r25, r1
     c20:	0e 94 47 0a 	call	0x148e	; 0x148e <__eeupd_byte_m32>
     c24:	40 e0       	ldi	r20, 0x00	; 0
     c26:	50 e0       	ldi	r21, 0x00	; 0
     c28:	ba 01       	movw	r22, r20
     c2a:	84 e6       	ldi	r24, 0x64	; 100
     c2c:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     c30:	80 e0       	ldi	r24, 0x00	; 0
     c32:	e7 c0       	rjmp	.+462    	; 0xe02 <__stack+0x5a3>
     c34:	00 91 a3 00 	lds	r16, 0x00A3
     c38:	10 e0       	ldi	r17, 0x00	; 0
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	60 17       	cp	r22, r16
     c40:	71 07       	cpc	r23, r17
     c42:	82 07       	cpc	r24, r18
     c44:	93 07       	cpc	r25, r19
     c46:	71 f0       	breq	.+28     	; 0xc64 <__stack+0x405>
     c48:	60 93 a3 00 	sts	0x00A3, r22
     c4c:	21 e0       	ldi	r18, 0x01	; 1
     c4e:	29 83       	std	Y+1, r18	; 0x01
     c50:	49 81       	ldd	r20, Y+1	; 0x01
     c52:	20 91 b2 00 	lds	r18, 0x00B2
     c56:	30 91 b3 00 	lds	r19, 0x00B3
     c5a:	c9 01       	movw	r24, r18
     c5c:	84 0f       	add	r24, r20
     c5e:	91 1d       	adc	r25, r1
     c60:	0e 94 47 0a 	call	0x148e	; 0x148e <__eeupd_byte_m32>
     c64:	40 e0       	ldi	r20, 0x00	; 0
     c66:	50 e0       	ldi	r21, 0x00	; 0
     c68:	ba 01       	movw	r22, r20
     c6a:	84 e6       	ldi	r24, 0x64	; 100
     c6c:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     c70:	80 e0       	ldi	r24, 0x00	; 0
     c72:	c7 c0       	rjmp	.+398    	; 0xe02 <__stack+0x5a3>
     c74:	00 91 a4 00 	lds	r16, 0x00A4
     c78:	10 e0       	ldi	r17, 0x00	; 0
     c7a:	20 e0       	ldi	r18, 0x00	; 0
     c7c:	30 e0       	ldi	r19, 0x00	; 0
     c7e:	60 17       	cp	r22, r16
     c80:	71 07       	cpc	r23, r17
     c82:	82 07       	cpc	r24, r18
     c84:	93 07       	cpc	r25, r19
     c86:	71 f0       	breq	.+28     	; 0xca4 <__stack+0x445>
     c88:	60 93 a4 00 	sts	0x00A4, r22
     c8c:	22 e0       	ldi	r18, 0x02	; 2
     c8e:	29 83       	std	Y+1, r18	; 0x01
     c90:	49 81       	ldd	r20, Y+1	; 0x01
     c92:	20 91 b2 00 	lds	r18, 0x00B2
     c96:	30 91 b3 00 	lds	r19, 0x00B3
     c9a:	c9 01       	movw	r24, r18
     c9c:	84 0f       	add	r24, r20
     c9e:	91 1d       	adc	r25, r1
     ca0:	0e 94 47 0a 	call	0x148e	; 0x148e <__eeupd_byte_m32>
     ca4:	40 e0       	ldi	r20, 0x00	; 0
     ca6:	50 e0       	ldi	r21, 0x00	; 0
     ca8:	ba 01       	movw	r22, r20
     caa:	84 e6       	ldi	r24, 0x64	; 100
     cac:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     cb0:	80 e0       	ldi	r24, 0x00	; 0
     cb2:	a7 c0       	rjmp	.+334    	; 0xe02 <__stack+0x5a3>
     cb4:	00 91 a6 00 	lds	r16, 0x00A6
     cb8:	10 e0       	ldi	r17, 0x00	; 0
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	30 e0       	ldi	r19, 0x00	; 0
     cbe:	60 17       	cp	r22, r16
     cc0:	71 07       	cpc	r23, r17
     cc2:	82 07       	cpc	r24, r18
     cc4:	93 07       	cpc	r25, r19
     cc6:	71 f0       	breq	.+28     	; 0xce4 <__stack+0x485>
     cc8:	60 93 a6 00 	sts	0x00A6, r22
     ccc:	24 e0       	ldi	r18, 0x04	; 4
     cce:	29 83       	std	Y+1, r18	; 0x01
     cd0:	49 81       	ldd	r20, Y+1	; 0x01
     cd2:	20 91 b2 00 	lds	r18, 0x00B2
     cd6:	30 91 b3 00 	lds	r19, 0x00B3
     cda:	c9 01       	movw	r24, r18
     cdc:	84 0f       	add	r24, r20
     cde:	91 1d       	adc	r25, r1
     ce0:	0e 94 47 0a 	call	0x148e	; 0x148e <__eeupd_byte_m32>
     ce4:	40 e0       	ldi	r20, 0x00	; 0
     ce6:	50 e0       	ldi	r21, 0x00	; 0
     ce8:	ba 01       	movw	r22, r20
     cea:	84 e6       	ldi	r24, 0x64	; 100
     cec:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     cf0:	80 e0       	ldi	r24, 0x00	; 0
     cf2:	87 c0       	rjmp	.+270    	; 0xe02 <__stack+0x5a3>
     cf4:	40 e0       	ldi	r20, 0x00	; 0
     cf6:	50 e0       	ldi	r21, 0x00	; 0
     cf8:	ba 01       	movw	r22, r20
     cfa:	84 e0       	ldi	r24, 0x04	; 4
     cfc:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     d00:	80 e0       	ldi	r24, 0x00	; 0
     d02:	7f c0       	rjmp	.+254    	; 0xe02 <__stack+0x5a3>
     d04:	80 91 ac 00 	lds	r24, 0x00AC
     d08:	88 23       	and	r24, r24
     d0a:	41 f0       	breq	.+16     	; 0xd1c <__stack+0x4bd>
     d0c:	40 e0       	ldi	r20, 0x00	; 0
     d0e:	50 e0       	ldi	r21, 0x00	; 0
     d10:	ba 01       	movw	r22, r20
     d12:	84 e0       	ldi	r24, 0x04	; 4
     d14:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     d18:	80 e0       	ldi	r24, 0x00	; 0
     d1a:	73 c0       	rjmp	.+230    	; 0xe02 <__stack+0x5a3>
     d1c:	80 91 ab 00 	lds	r24, 0x00AB
     d20:	81 34       	cpi	r24, 0x41	; 65
     d22:	49 f0       	breq	.+18     	; 0xd36 <__stack+0x4d7>
     d24:	18 f4       	brcc	.+6      	; 0xd2c <__stack+0x4cd>
     d26:	80 34       	cpi	r24, 0x40	; 64
     d28:	21 f1       	breq	.+72     	; 0xd72 <__stack+0x513>
     d2a:	2d c0       	rjmp	.+90     	; 0xd86 <__stack+0x527>
     d2c:	82 34       	cpi	r24, 0x42	; 66
     d2e:	69 f0       	breq	.+26     	; 0xd4a <__stack+0x4eb>
     d30:	8c 34       	cpi	r24, 0x4C	; 76
     d32:	a9 f0       	breq	.+42     	; 0xd5e <__stack+0x4ff>
     d34:	28 c0       	rjmp	.+80     	; 0xd86 <__stack+0x527>
     d36:	40 91 a3 00 	lds	r20, 0x00A3
     d3a:	50 e0       	ldi	r21, 0x00	; 0
     d3c:	60 e0       	ldi	r22, 0x00	; 0
     d3e:	70 e0       	ldi	r23, 0x00	; 0
     d40:	84 e6       	ldi	r24, 0x64	; 100
     d42:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	5c c0       	rjmp	.+184    	; 0xe02 <__stack+0x5a3>
     d4a:	40 91 a4 00 	lds	r20, 0x00A4
     d4e:	50 e0       	ldi	r21, 0x00	; 0
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	84 e6       	ldi	r24, 0x64	; 100
     d56:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     d5a:	80 e0       	ldi	r24, 0x00	; 0
     d5c:	52 c0       	rjmp	.+164    	; 0xe02 <__stack+0x5a3>
     d5e:	40 91 a6 00 	lds	r20, 0x00A6
     d62:	50 e0       	ldi	r21, 0x00	; 0
     d64:	60 e0       	ldi	r22, 0x00	; 0
     d66:	70 e0       	ldi	r23, 0x00	; 0
     d68:	84 e6       	ldi	r24, 0x64	; 100
     d6a:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     d6e:	80 e0       	ldi	r24, 0x00	; 0
     d70:	48 c0       	rjmp	.+144    	; 0xe02 <__stack+0x5a3>
     d72:	40 91 a2 00 	lds	r20, 0x00A2
     d76:	50 e0       	ldi	r21, 0x00	; 0
     d78:	60 e0       	ldi	r22, 0x00	; 0
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	84 e6       	ldi	r24, 0x64	; 100
     d7e:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     d82:	80 e0       	ldi	r24, 0x00	; 0
     d84:	3e c0       	rjmp	.+124    	; 0xe02 <__stack+0x5a3>
     d86:	40 e0       	ldi	r20, 0x00	; 0
     d88:	50 e0       	ldi	r21, 0x00	; 0
     d8a:	ba 01       	movw	r22, r20
     d8c:	84 e0       	ldi	r24, 0x04	; 4
     d8e:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	36 c0       	rjmp	.+108    	; 0xe02 <__stack+0x5a3>
     d96:	80 91 ab 00 	lds	r24, 0x00AB
     d9a:	81 11       	cpse	r24, r1
     d9c:	1c c0       	rjmp	.+56     	; 0xdd6 <__stack+0x577>
     d9e:	80 91 b4 00 	lds	r24, 0x00B4
     da2:	80 93 99 00 	sts	0x0099, r24
     da6:	81 e3       	ldi	r24, 0x31	; 49
     da8:	80 93 9a 00 	sts	0x009A, r24
     dac:	90 e3       	ldi	r25, 0x30	; 48
     dae:	90 93 9b 00 	sts	0x009B, r25
     db2:	22 e3       	ldi	r18, 0x32	; 50
     db4:	20 93 9c 00 	sts	0x009C, r18
     db8:	80 93 9d 00 	sts	0x009D, r24
     dbc:	36 e5       	ldi	r19, 0x56	; 86
     dbe:	30 93 9e 00 	sts	0x009E, r19
     dc2:	80 93 9f 00 	sts	0x009F, r24
     dc6:	20 93 a0 00 	sts	0x00A0, r18
     dca:	90 93 a1 00 	sts	0x00A1, r25
     dce:	0e 94 49 03 	call	0x692	; 0x692 <TB_Send>
     dd2:	80 e0       	ldi	r24, 0x00	; 0
     dd4:	16 c0       	rjmp	.+44     	; 0xe02 <__stack+0x5a3>
     dd6:	40 e4       	ldi	r20, 0x40	; 64
     dd8:	50 e3       	ldi	r21, 0x30	; 48
     dda:	60 e2       	ldi	r22, 0x20	; 32
     ddc:	70 e1       	ldi	r23, 0x10	; 16
     dde:	84 e6       	ldi	r24, 0x64	; 100
     de0:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     de4:	80 e0       	ldi	r24, 0x00	; 0
     de6:	0d c0       	rjmp	.+26     	; 0xe02 <__stack+0x5a3>
     de8:	40 e0       	ldi	r20, 0x00	; 0
     dea:	50 e0       	ldi	r21, 0x00	; 0
     dec:	ba 01       	movw	r22, r20
     dee:	82 e0       	ldi	r24, 0x02	; 2
     df0:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
     df4:	80 e0       	ldi	r24, 0x00	; 0
     df6:	05 c0       	rjmp	.+10     	; 0xe02 <__stack+0x5a3>
     df8:	84 e0       	ldi	r24, 0x04	; 4
     dfa:	03 c0       	rjmp	.+6      	; 0xe02 <__stack+0x5a3>
     dfc:	8e e0       	ldi	r24, 0x0E	; 14
     dfe:	01 c0       	rjmp	.+2      	; 0xe02 <__stack+0x5a3>
     e00:	80 e0       	ldi	r24, 0x00	; 0
     e02:	0f 90       	pop	r0
     e04:	df 91       	pop	r29
     e06:	cf 91       	pop	r28
     e08:	1f 91       	pop	r17
     e0a:	0f 91       	pop	r16
     e0c:	08 95       	ret

00000e0e <TB_SendSerVzorku>:
     e0e:	af 92       	push	r10
     e10:	cf 92       	push	r12
     e12:	ef 92       	push	r14
     e14:	0f 93       	push	r16
     e16:	80 93 99 00 	sts	0x0099, r24
     e1a:	60 93 9a 00 	sts	0x009A, r22
     e1e:	40 93 9b 00 	sts	0x009B, r20
     e22:	20 93 9c 00 	sts	0x009C, r18
     e26:	00 93 9d 00 	sts	0x009D, r16
     e2a:	e0 92 9e 00 	sts	0x009E, r14
     e2e:	c0 92 9f 00 	sts	0x009F, r12
     e32:	a0 92 a0 00 	sts	0x00A0, r10
     e36:	0e 94 51 03 	call	0x6a2	; 0x6a2 <TB_calcSum>
     e3a:	0e 94 49 03 	call	0x692	; 0x692 <TB_Send>
     e3e:	0f 91       	pop	r16
     e40:	ef 90       	pop	r14
     e42:	cf 90       	pop	r12
     e44:	af 90       	pop	r10
     e46:	08 95       	ret

00000e48 <uart_get_char>:
     e48:	90 91 73 00 	lds	r25, 0x0073
     e4c:	80 91 74 00 	lds	r24, 0x0074
     e50:	98 17       	cp	r25, r24
     e52:	61 f0       	breq	.+24     	; 0xe6c <uart_get_char+0x24>
     e54:	90 91 74 00 	lds	r25, 0x0074
     e58:	9f 5f       	subi	r25, 0xFF	; 255
     e5a:	9f 70       	andi	r25, 0x0F	; 15
     e5c:	e9 2f       	mov	r30, r25
     e5e:	f0 e0       	ldi	r31, 0x00	; 0
     e60:	e2 5b       	subi	r30, 0xB2	; 178
     e62:	fe 4f       	sbci	r31, 0xFE	; 254
     e64:	80 81       	ld	r24, Z
     e66:	90 93 74 00 	sts	0x0074, r25
     e6a:	08 95       	ret
     e6c:	80 e0       	ldi	r24, 0x00	; 0
     e6e:	08 95       	ret

00000e70 <uart_receive_char>:
     e70:	90 91 73 00 	lds	r25, 0x0073
     e74:	9f 5f       	subi	r25, 0xFF	; 255
     e76:	9f 70       	andi	r25, 0x0F	; 15
     e78:	e9 2f       	mov	r30, r25
     e7a:	f0 e0       	ldi	r31, 0x00	; 0
     e7c:	e2 5b       	subi	r30, 0xB2	; 178
     e7e:	fe 4f       	sbci	r31, 0xFE	; 254
     e80:	80 83       	st	Z, r24
     e82:	90 93 73 00 	sts	0x0073, r25
     e86:	08 95       	ret

00000e88 <uart_send_char>:
     e88:	90 91 72 00 	lds	r25, 0x0072
     e8c:	e9 2f       	mov	r30, r25
     e8e:	f0 e0       	ldi	r31, 0x00	; 0
     e90:	eb 54       	subi	r30, 0x4B	; 75
     e92:	ff 4f       	sbci	r31, 0xFF	; 255
     e94:	80 81       	ld	r24, Z
     e96:	9f 5f       	subi	r25, 0xFF	; 255
     e98:	90 93 72 00 	sts	0x0072, r25
     e9c:	08 95       	ret

00000e9e <uart_send>:
     e9e:	80 91 6b 00 	lds	r24, 0x006B
     ea2:	80 fd       	sbrc	r24, 0
     ea4:	0b c0       	rjmp	.+22     	; 0xebc <uart_send+0x1e>
     ea6:	80 91 6b 00 	lds	r24, 0x006B
     eaa:	81 60       	ori	r24, 0x01	; 1
     eac:	80 93 6b 00 	sts	0x006B, r24
     eb0:	92 9a       	sbi	0x12, 2	; 18
     eb2:	10 92 72 00 	sts	0x0072, r1
     eb6:	0e 94 44 07 	call	0xe88	; 0xe88 <uart_send_char>
     eba:	8c b9       	out	0x0c, r24	; 12
     ebc:	08 95       	ret

00000ebe <uart_interrupt_rx>:
     ebe:	88 23       	and	r24, r24
     ec0:	11 f0       	breq	.+4      	; 0xec6 <uart_interrupt_rx+0x8>
     ec2:	57 9a       	sbi	0x0a, 7	; 10
     ec4:	08 95       	ret
     ec6:	57 98       	cbi	0x0a, 7	; 10
     ec8:	08 95       	ret

00000eca <uart_interrupt_tx>:
     eca:	88 23       	and	r24, r24
     ecc:	11 f0       	breq	.+4      	; 0xed2 <uart_interrupt_tx+0x8>
     ece:	56 9a       	sbi	0x0a, 6	; 10
     ed0:	08 95       	ret
     ed2:	56 98       	cbi	0x0a, 6	; 10
     ed4:	08 95       	ret

00000ed6 <__vector_13>:
     ed6:	1f 92       	push	r1
     ed8:	0f 92       	push	r0
     eda:	0f b6       	in	r0, 0x3f	; 63
     edc:	0f 92       	push	r0
     ede:	11 24       	eor	r1, r1
     ee0:	2f 93       	push	r18
     ee2:	3f 93       	push	r19
     ee4:	4f 93       	push	r20
     ee6:	5f 93       	push	r21
     ee8:	6f 93       	push	r22
     eea:	7f 93       	push	r23
     eec:	8f 93       	push	r24
     eee:	9f 93       	push	r25
     ef0:	af 93       	push	r26
     ef2:	bf 93       	push	r27
     ef4:	ef 93       	push	r30
     ef6:	ff 93       	push	r31
     ef8:	85 e0       	ldi	r24, 0x05	; 5
     efa:	80 93 6d 00 	sts	0x006D, r24
     efe:	8b b1       	in	r24, 0x0b	; 11
     f00:	90 91 6c 00 	lds	r25, 0x006C
     f04:	89 2b       	or	r24, r25
     f06:	80 93 6c 00 	sts	0x006C, r24
     f0a:	8c b1       	in	r24, 0x0c	; 12
     f0c:	0e 94 38 07 	call	0xe70	; 0xe70 <uart_receive_char>
     f10:	ff 91       	pop	r31
     f12:	ef 91       	pop	r30
     f14:	bf 91       	pop	r27
     f16:	af 91       	pop	r26
     f18:	9f 91       	pop	r25
     f1a:	8f 91       	pop	r24
     f1c:	7f 91       	pop	r23
     f1e:	6f 91       	pop	r22
     f20:	5f 91       	pop	r21
     f22:	4f 91       	pop	r20
     f24:	3f 91       	pop	r19
     f26:	2f 91       	pop	r18
     f28:	0f 90       	pop	r0
     f2a:	0f be       	out	0x3f, r0	; 63
     f2c:	0f 90       	pop	r0
     f2e:	1f 90       	pop	r1
     f30:	18 95       	reti

00000f32 <__vector_15>:
     f32:	1f 92       	push	r1
     f34:	0f 92       	push	r0
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	0f 92       	push	r0
     f3a:	11 24       	eor	r1, r1
     f3c:	2f 93       	push	r18
     f3e:	3f 93       	push	r19
     f40:	4f 93       	push	r20
     f42:	5f 93       	push	r21
     f44:	6f 93       	push	r22
     f46:	7f 93       	push	r23
     f48:	8f 93       	push	r24
     f4a:	9f 93       	push	r25
     f4c:	af 93       	push	r26
     f4e:	bf 93       	push	r27
     f50:	ef 93       	push	r30
     f52:	ff 93       	push	r31
     f54:	80 91 6b 00 	lds	r24, 0x006B
     f58:	80 ff       	sbrs	r24, 0
     f5a:	0e c0       	rjmp	.+28     	; 0xf78 <__vector_15+0x46>
     f5c:	80 91 72 00 	lds	r24, 0x0072
     f60:	89 30       	cpi	r24, 0x09	; 9
     f62:	38 f0       	brcs	.+14     	; 0xf72 <__vector_15+0x40>
     f64:	80 91 6b 00 	lds	r24, 0x006B
     f68:	8e 7f       	andi	r24, 0xFE	; 254
     f6a:	80 93 6b 00 	sts	0x006B, r24
     f6e:	92 98       	cbi	0x12, 2	; 18
     f70:	03 c0       	rjmp	.+6      	; 0xf78 <__vector_15+0x46>
     f72:	0e 94 44 07 	call	0xe88	; 0xe88 <uart_send_char>
     f76:	8c b9       	out	0x0c, r24	; 12
     f78:	ff 91       	pop	r31
     f7a:	ef 91       	pop	r30
     f7c:	bf 91       	pop	r27
     f7e:	af 91       	pop	r26
     f80:	9f 91       	pop	r25
     f82:	8f 91       	pop	r24
     f84:	7f 91       	pop	r23
     f86:	6f 91       	pop	r22
     f88:	5f 91       	pop	r21
     f8a:	4f 91       	pop	r20
     f8c:	3f 91       	pop	r19
     f8e:	2f 91       	pop	r18
     f90:	0f 90       	pop	r0
     f92:	0f be       	out	0x3f, r0	; 63
     f94:	0f 90       	pop	r0
     f96:	1f 90       	pop	r1
     f98:	18 95       	reti

00000f9a <uart0_init>:
     f9a:	87 e0       	ldi	r24, 0x07	; 7
     f9c:	89 b9       	out	0x09, r24	; 9
     f9e:	8a b1       	in	r24, 0x0a	; 10
     fa0:	88 61       	ori	r24, 0x18	; 24
     fa2:	8a b9       	out	0x0a, r24	; 10
     fa4:	81 e0       	ldi	r24, 0x01	; 1
     fa6:	0e 94 5f 07 	call	0xebe	; 0xebe <uart_interrupt_rx>
     faa:	81 e0       	ldi	r24, 0x01	; 1
     fac:	0e 94 65 07 	call	0xeca	; 0xeca <uart_interrupt_tx>
     fb0:	10 92 6c 00 	sts	0x006C, r1
     fb4:	08 95       	ret

00000fb6 <uart0_process>:
     fb6:	bf 92       	push	r11
     fb8:	cf 92       	push	r12
     fba:	df 92       	push	r13
     fbc:	ef 92       	push	r14
     fbe:	ff 92       	push	r15
     fc0:	0f 93       	push	r16
     fc2:	1f 93       	push	r17
     fc4:	cf 93       	push	r28
     fc6:	df 93       	push	r29
     fc8:	90 91 70 00 	lds	r25, 0x0070
     fcc:	80 91 71 00 	lds	r24, 0x0071
     fd0:	98 17       	cp	r25, r24
     fd2:	49 f1       	breq	.+82     	; 0x1026 <uart0_process+0x70>
     fd4:	80 91 6b 00 	lds	r24, 0x006B
     fd8:	80 fd       	sbrc	r24, 0
     fda:	25 c0       	rjmp	.+74     	; 0x1026 <uart0_process+0x70>
     fdc:	50 91 71 00 	lds	r21, 0x0071
     fe0:	5f 5f       	subi	r21, 0xFF	; 255
     fe2:	5f 70       	andi	r21, 0x0F	; 15
     fe4:	85 2f       	mov	r24, r21
     fe6:	90 e0       	ldi	r25, 0x00	; 0
     fe8:	9c 01       	movw	r18, r24
     fea:	22 0f       	add	r18, r18
     fec:	33 1f       	adc	r19, r19
     fee:	22 0f       	add	r18, r18
     ff0:	33 1f       	adc	r19, r19
     ff2:	22 0f       	add	r18, r18
     ff4:	33 1f       	adc	r19, r19
     ff6:	82 0f       	add	r24, r18
     ff8:	93 1f       	adc	r25, r19
     ffa:	82 5a       	subi	r24, 0xA2	; 162
     ffc:	9e 4f       	sbci	r25, 0xFE	; 254
     ffe:	9c 01       	movw	r18, r24
    1000:	27 5f       	subi	r18, 0xF7	; 247
    1002:	3f 4f       	sbci	r19, 0xFF	; 255
    1004:	fc 01       	movw	r30, r24
    1006:	df 01       	movw	r26, r30
    1008:	a8 1b       	sub	r26, r24
    100a:	b9 0b       	sbc	r27, r25
    100c:	41 91       	ld	r20, Z+
    100e:	ab 54       	subi	r26, 0x4B	; 75
    1010:	bf 4f       	sbci	r27, 0xFF	; 255
    1012:	4c 93       	st	X, r20
    1014:	e2 17       	cp	r30, r18
    1016:	f3 07       	cpc	r31, r19
    1018:	b1 f7       	brne	.-20     	; 0x1006 <uart0_process+0x50>
    101a:	50 93 71 00 	sts	0x0071, r21
    101e:	10 92 72 00 	sts	0x0072, r1
    1022:	0e 94 4f 07 	call	0xe9e	; 0xe9e <uart_send>
    1026:	80 91 6b 00 	lds	r24, 0x006B
    102a:	83 fd       	sbrc	r24, 3
    102c:	4b c0       	rjmp	.+150    	; 0x10c4 <uart0_process+0x10e>
    102e:	80 91 73 00 	lds	r24, 0x0073
    1032:	90 91 74 00 	lds	r25, 0x0074
    1036:	89 1b       	sub	r24, r25
    1038:	8f 70       	andi	r24, 0x0F	; 15
    103a:	89 30       	cpi	r24, 0x09	; 9
    103c:	08 f4       	brcc	.+2      	; 0x1040 <uart0_process+0x8a>
    103e:	42 c0       	rjmp	.+132    	; 0x10c4 <uart0_process+0x10e>
    1040:	b0 90 6e 00 	lds	r11, 0x006E
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	8b 0d       	add	r24, r11
    1048:	8f 70       	andi	r24, 0x0F	; 15
    104a:	b8 2e       	mov	r11, r24
    104c:	e8 2e       	mov	r14, r24
    104e:	f1 2c       	mov	r15, r1
    1050:	f7 01       	movw	r30, r14
    1052:	ee 0f       	add	r30, r30
    1054:	ff 1f       	adc	r31, r31
    1056:	ee 0f       	add	r30, r30
    1058:	ff 1f       	adc	r31, r31
    105a:	ee 0f       	add	r30, r30
    105c:	ff 1f       	adc	r31, r31
    105e:	ee 0d       	add	r30, r14
    1060:	ff 1d       	adc	r31, r15
    1062:	cf 01       	movw	r24, r30
    1064:	82 54       	subi	r24, 0x42	; 66
    1066:	9f 4f       	sbci	r25, 0xFF	; 255
    1068:	6c 01       	movw	r12, r24
    106a:	8c 01       	movw	r16, r24
    106c:	07 5f       	subi	r16, 0xF7	; 247
    106e:	1f 4f       	sbci	r17, 0xFF	; 255
    1070:	ec 01       	movw	r28, r24
    1072:	0e 94 24 07 	call	0xe48	; 0xe48 <uart_get_char>
    1076:	89 93       	st	Y+, r24
    1078:	c0 17       	cp	r28, r16
    107a:	d1 07       	cpc	r29, r17
    107c:	d1 f7       	brne	.-12     	; 0x1072 <uart0_process+0xbc>
    107e:	f6 01       	movw	r30, r12
    1080:	90 e0       	ldi	r25, 0x00	; 0
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	21 91       	ld	r18, Z+
    1086:	92 0f       	add	r25, r18
    1088:	8f 5f       	subi	r24, 0xFF	; 255
    108a:	88 30       	cpi	r24, 0x08	; 8
    108c:	d9 f7       	brne	.-10     	; 0x1084 <uart0_process+0xce>
    108e:	f7 01       	movw	r30, r14
    1090:	ee 0f       	add	r30, r30
    1092:	ff 1f       	adc	r31, r31
    1094:	ee 0f       	add	r30, r30
    1096:	ff 1f       	adc	r31, r31
    1098:	ee 0f       	add	r30, r30
    109a:	ff 1f       	adc	r31, r31
    109c:	ee 0d       	add	r30, r14
    109e:	ff 1d       	adc	r31, r15
    10a0:	e2 54       	subi	r30, 0x42	; 66
    10a2:	ff 4f       	sbci	r31, 0xFF	; 255
    10a4:	80 85       	ldd	r24, Z+8	; 0x08
    10a6:	98 13       	cpse	r25, r24
    10a8:	08 c0       	rjmp	.+16     	; 0x10ba <uart0_process+0x104>
    10aa:	80 91 6b 00 	lds	r24, 0x006B
    10ae:	88 60       	ori	r24, 0x08	; 8
    10b0:	80 93 6b 00 	sts	0x006B, r24
    10b4:	b0 92 6e 00 	sts	0x006E, r11
    10b8:	05 c0       	rjmp	.+10     	; 0x10c4 <uart0_process+0x10e>
    10ba:	80 91 6b 00 	lds	r24, 0x006B
    10be:	80 61       	ori	r24, 0x10	; 16
    10c0:	80 93 6b 00 	sts	0x006B, r24
    10c4:	df 91       	pop	r29
    10c6:	cf 91       	pop	r28
    10c8:	1f 91       	pop	r17
    10ca:	0f 91       	pop	r16
    10cc:	ff 90       	pop	r15
    10ce:	ef 90       	pop	r14
    10d0:	df 90       	pop	r13
    10d2:	cf 90       	pop	r12
    10d4:	bf 90       	pop	r11
    10d6:	08 95       	ret

000010d8 <uart0_ISR_timer>:
    10d8:	80 91 6d 00 	lds	r24, 0x006D
    10dc:	88 23       	and	r24, r24
    10de:	41 f0       	breq	.+16     	; 0x10f0 <uart0_ISR_timer+0x18>
    10e0:	80 91 6d 00 	lds	r24, 0x006D
    10e4:	81 50       	subi	r24, 0x01	; 1
    10e6:	80 93 6d 00 	sts	0x006D, r24
    10ea:	10 92 6a 00 	sts	0x006A, r1
    10ee:	08 95       	ret
    10f0:	80 91 6a 00 	lds	r24, 0x006A
    10f4:	81 11       	cpse	r24, r1
    10f6:	07 c0       	rjmp	.+14     	; 0x1106 <uart0_ISR_timer+0x2e>
    10f8:	80 91 73 00 	lds	r24, 0x0073
    10fc:	80 93 74 00 	sts	0x0074, r24
    1100:	81 e0       	ldi	r24, 0x01	; 1
    1102:	80 93 6a 00 	sts	0x006A, r24
    1106:	08 95       	ret

00001108 <uart0_get_data_begin>:
    1108:	80 91 6f 00 	lds	r24, 0x006F
    110c:	8f 5f       	subi	r24, 0xFF	; 255
    110e:	8f 70       	andi	r24, 0x0F	; 15
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9c 01       	movw	r18, r24
    1114:	22 0f       	add	r18, r18
    1116:	33 1f       	adc	r19, r19
    1118:	22 0f       	add	r18, r18
    111a:	33 1f       	adc	r19, r19
    111c:	22 0f       	add	r18, r18
    111e:	33 1f       	adc	r19, r19
    1120:	82 0f       	add	r24, r18
    1122:	93 1f       	adc	r25, r19
    1124:	82 54       	subi	r24, 0x42	; 66
    1126:	9f 4f       	sbci	r25, 0xFF	; 255
    1128:	08 95       	ret

0000112a <uart0_get_data_end>:
    112a:	80 91 6f 00 	lds	r24, 0x006F
    112e:	8f 5f       	subi	r24, 0xFF	; 255
    1130:	8f 70       	andi	r24, 0x0F	; 15
    1132:	80 93 6f 00 	sts	0x006F, r24
    1136:	80 91 6e 00 	lds	r24, 0x006E
    113a:	90 91 6f 00 	lds	r25, 0x006F
    113e:	89 1b       	sub	r24, r25
    1140:	8f 70       	andi	r24, 0x0F	; 15
    1142:	29 f4       	brne	.+10     	; 0x114e <uart0_get_data_end+0x24>
    1144:	90 91 6b 00 	lds	r25, 0x006B
    1148:	97 7f       	andi	r25, 0xF7	; 247
    114a:	90 93 6b 00 	sts	0x006B, r25
    114e:	08 95       	ret

00001150 <uart0_put_data>:
    1150:	fc 01       	movw	r30, r24
    1152:	50 91 70 00 	lds	r21, 0x0070
    1156:	5f 5f       	subi	r21, 0xFF	; 255
    1158:	5f 70       	andi	r21, 0x0F	; 15
    115a:	85 2f       	mov	r24, r21
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	dc 01       	movw	r26, r24
    1160:	aa 0f       	add	r26, r26
    1162:	bb 1f       	adc	r27, r27
    1164:	aa 0f       	add	r26, r26
    1166:	bb 1f       	adc	r27, r27
    1168:	aa 0f       	add	r26, r26
    116a:	bb 1f       	adc	r27, r27
    116c:	a8 0f       	add	r26, r24
    116e:	b9 1f       	adc	r27, r25
    1170:	a2 5a       	subi	r26, 0xA2	; 162
    1172:	be 4f       	sbci	r27, 0xFE	; 254
    1174:	30 e0       	ldi	r19, 0x00	; 0
    1176:	20 e0       	ldi	r18, 0x00	; 0
    1178:	40 81       	ld	r20, Z
    117a:	4d 93       	st	X+, r20
    117c:	41 91       	ld	r20, Z+
    117e:	34 0f       	add	r19, r20
    1180:	2f 5f       	subi	r18, 0xFF	; 255
    1182:	28 30       	cpi	r18, 0x08	; 8
    1184:	c9 f7       	brne	.-14     	; 0x1178 <uart0_put_data+0x28>
    1186:	fc 01       	movw	r30, r24
    1188:	ee 0f       	add	r30, r30
    118a:	ff 1f       	adc	r31, r31
    118c:	ee 0f       	add	r30, r30
    118e:	ff 1f       	adc	r31, r31
    1190:	ee 0f       	add	r30, r30
    1192:	ff 1f       	adc	r31, r31
    1194:	8e 0f       	add	r24, r30
    1196:	9f 1f       	adc	r25, r31
    1198:	fc 01       	movw	r30, r24
    119a:	e2 5a       	subi	r30, 0xA2	; 162
    119c:	fe 4f       	sbci	r31, 0xFE	; 254
    119e:	30 87       	std	Z+8, r19	; 0x08
    11a0:	50 93 70 00 	sts	0x0070, r21
    11a4:	08 95       	ret

000011a6 <uart0_set_baud>:
    11a6:	90 e0       	ldi	r25, 0x00	; 0
    11a8:	8b 30       	cpi	r24, 0x0B	; 11
    11aa:	91 05       	cpc	r25, r1
    11ac:	28 f5       	brcc	.+74     	; 0x11f8 <uart0_set_baud+0x52>
    11ae:	fc 01       	movw	r30, r24
    11b0:	e6 5d       	subi	r30, 0xD6	; 214
    11b2:	ff 4f       	sbci	r31, 0xFF	; 255
    11b4:	0c 94 31 0a 	jmp	0x1462	; 0x1462 <__tablejump2__>
    11b8:	8f e5       	ldi	r24, 0x5F	; 95
    11ba:	89 b9       	out	0x09, r24	; 9
    11bc:	08 95       	ret
    11be:	8f e3       	ldi	r24, 0x3F	; 63
    11c0:	89 b9       	out	0x09, r24	; 9
    11c2:	08 95       	ret
    11c4:	8f e2       	ldi	r24, 0x2F	; 47
    11c6:	89 b9       	out	0x09, r24	; 9
    11c8:	08 95       	ret
    11ca:	8f e1       	ldi	r24, 0x1F	; 31
    11cc:	89 b9       	out	0x09, r24	; 9
    11ce:	08 95       	ret
    11d0:	87 e1       	ldi	r24, 0x17	; 23
    11d2:	89 b9       	out	0x09, r24	; 9
    11d4:	08 95       	ret
    11d6:	8f e0       	ldi	r24, 0x0F	; 15
    11d8:	89 b9       	out	0x09, r24	; 9
    11da:	08 95       	ret
    11dc:	8b e0       	ldi	r24, 0x0B	; 11
    11de:	89 b9       	out	0x09, r24	; 9
    11e0:	08 95       	ret
    11e2:	87 e0       	ldi	r24, 0x07	; 7
    11e4:	89 b9       	out	0x09, r24	; 9
    11e6:	08 95       	ret
    11e8:	83 e0       	ldi	r24, 0x03	; 3
    11ea:	89 b9       	out	0x09, r24	; 9
    11ec:	08 95       	ret
    11ee:	82 e0       	ldi	r24, 0x02	; 2
    11f0:	89 b9       	out	0x09, r24	; 9
    11f2:	08 95       	ret
    11f4:	19 b8       	out	0x09, r1	; 9
    11f6:	08 95       	ret
    11f8:	8f e2       	ldi	r24, 0x2F	; 47
    11fa:	89 b9       	out	0x09, r24	; 9
    11fc:	08 95       	ret

000011fe <send_data>:



void send_data(void)
{
	uart0_put_data((byte *) &TB_bufOut);
    11fe:	89 e9       	ldi	r24, 0x99	; 153
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 a8 08 	call	0x1150	; 0x1150 <uart0_put_data>
    1206:	08 95       	ret

00001208 <rc522_read_card_id>:

/*
read card serial id
*/
uint8_t rc522_read_card_id(uint8_t *card_id, uint16_t *card_type)
{
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	cd b7       	in	r28, 0x3d	; 61
    1212:	de b7       	in	r29, 0x3e	; 62
    1214:	60 97       	sbiw	r28, 0x10	; 16
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	8c 01       	movw	r16, r24
	uint8_t status, resx = 0;
	uint8_t buff_data[MAX_LEN];

	*card_type = 0;
    1222:	fb 01       	movw	r30, r22
    1224:	11 82       	std	Z+1, r1	; 0x01
    1226:	10 82       	st	Z, r1
	if(mfrc522_is_card(card_type))
    1228:	cb 01       	movw	r24, r22
    122a:	0e 94 b8 02 	call	0x570	; 0x570 <mfrc522_is_card>
    122e:	88 23       	and	r24, r24
    1230:	81 f0       	breq	.+32     	; 0x1252 <rc522_read_card_id+0x4a>
	{
		status = mfrc522_get_card_serial(buff_data);
    1232:	ce 01       	movw	r24, r28
    1234:	01 96       	adiw	r24, 0x01	; 1
    1236:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <mfrc522_get_card_serial>
		if (status==CARD_FOUND)
    123a:	81 30       	cpi	r24, 0x01	; 1
    123c:	61 f4       	brne	.+24     	; 0x1256 <rc522_read_card_id+0x4e>
		{
			memcpy(card_id,buff_data,5);//kopi id and checksum at last byte (5th)
    123e:	85 e0       	ldi	r24, 0x05	; 5
    1240:	fe 01       	movw	r30, r28
    1242:	31 96       	adiw	r30, 0x01	; 1
    1244:	d8 01       	movw	r26, r16
    1246:	01 90       	ld	r0, Z+
    1248:	0d 92       	st	X+, r0
    124a:	8a 95       	dec	r24
    124c:	e1 f7       	brne	.-8      	; 0x1246 <rc522_read_card_id+0x3e>
			resx = 1;
    124e:	81 e0       	ldi	r24, 0x01	; 1
    1250:	03 c0       	rjmp	.+6      	; 0x1258 <rc522_read_card_id+0x50>
			resx = 0;
		}
	}
	else
	{
		resx = 0;
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	01 c0       	rjmp	.+2      	; 0x1258 <rc522_read_card_id+0x50>
			memcpy(card_id,buff_data,5);//kopi id and checksum at last byte (5th)
			resx = 1;
		}
		else
		{
			resx = 0;
    1256:	80 e0       	ldi	r24, 0x00	; 0
	{
		resx = 0;
	}
	
	return resx;
}
    1258:	60 96       	adiw	r28, 0x10	; 16
    125a:	0f b6       	in	r0, 0x3f	; 63
    125c:	f8 94       	cli
    125e:	de bf       	out	0x3e, r29	; 62
    1260:	0f be       	out	0x3f, r0	; 63
    1262:	cd bf       	out	0x3d, r28	; 61
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	1f 91       	pop	r17
    126a:	0f 91       	pop	r16
    126c:	08 95       	ret

0000126e <__vector_6>:
{
	uart0_put_data((byte *) &TB_bufOut);
}

//----------------------------------------------------------
ISR(TIMER1_CAPT_vect) {
    126e:	1f 92       	push	r1
    1270:	0f 92       	push	r0
    1272:	0f b6       	in	r0, 0x3f	; 63
    1274:	0f 92       	push	r0
    1276:	11 24       	eor	r1, r1
    1278:	8f 93       	push	r24
	// T = 10ms
	timer0_flag = true;
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	80 93 76 00 	sts	0x0076, r24
}
    1280:	8f 91       	pop	r24
    1282:	0f 90       	pop	r0
    1284:	0f be       	out	0x3f, r0	; 63
    1286:	0f 90       	pop	r0
    1288:	1f 90       	pop	r1
    128a:	18 95       	reti

0000128c <process_timer_100Hz>:

//----------------------------------------------------------
void process_timer_100Hz(void)
{
	if (timer0_flag) { // T = 10ms
    128c:	80 91 76 00 	lds	r24, 0x0076
    1290:	88 23       	and	r24, r24
    1292:	81 f0       	breq	.+32     	; 0x12b4 <process_timer_100Hz+0x28>
		timer0_flag = false;
    1294:	10 92 76 00 	sts	0x0076, r1
		uart0_ISR_timer();
    1298:	0e 94 6c 08 	call	0x10d8	; 0x10d8 <uart0_ISR_timer>
		if (led_timer > 0) {
    129c:	80 91 75 00 	lds	r24, 0x0075
    12a0:	88 23       	and	r24, r24
    12a2:	41 f0       	breq	.+16     	; 0x12b4 <process_timer_100Hz+0x28>
			led_timer--;
    12a4:	81 50       	subi	r24, 0x01	; 1
    12a6:	80 93 75 00 	sts	0x0075, r24
			if (led_timer == 0) {
    12aa:	81 11       	cpse	r24, r1
    12ac:	03 c0       	rjmp	.+6      	; 0x12b4 <process_timer_100Hz+0x28>
				PORTA ^= (1 << PA7);
    12ae:	8b b3       	in	r24, 0x1b	; 27
    12b0:	80 58       	subi	r24, 0x80	; 128
    12b2:	8b bb       	out	0x1b, r24	; 27
    12b4:	08 95       	ret

000012b6 <try_receive_data>:
		}
	}
}

void try_receive_data(void)
{
    12b6:	af 92       	push	r10
    12b8:	cf 92       	push	r12
    12ba:	ef 92       	push	r14
    12bc:	0f 93       	push	r16
	byte i;
	byte *ptr;
	
	if (uart0_flags.data_received)
    12be:	80 91 6b 00 	lds	r24, 0x006B
    12c2:	83 ff       	sbrs	r24, 3
    12c4:	a6 c0       	rjmp	.+332    	; 0x1412 <try_receive_data+0x15c>
	{
		ptr = uart0_get_data_begin();
    12c6:	0e 94 84 08 	call	0x1108	; 0x1108 <uart0_get_data_begin>
    12ca:	dc 01       	movw	r26, r24
    12cc:	e9 ea       	ldi	r30, 0xA9	; 169
    12ce:	f0 e0       	ldi	r31, 0x00	; 0
    12d0:	82 eb       	ldi	r24, 0xB2	; 178
    12d2:	90 e0       	ldi	r25, 0x00	; 0
		for (i=0; i<9; i++)
		{
			TB_bufIn[i] = *ptr;
    12d4:	2d 91       	ld	r18, X+
    12d6:	21 93       	st	Z+, r18
	byte *ptr;
	
	if (uart0_flags.data_received)
	{
		ptr = uart0_get_data_begin();
		for (i=0; i<9; i++)
    12d8:	e8 17       	cp	r30, r24
    12da:	f9 07       	cpc	r31, r25
    12dc:	d9 f7       	brne	.-10     	; 0x12d4 <try_receive_data+0x1e>
		{
			TB_bufIn[i] = *ptr;
			ptr++;
		}
		uart0_get_data_end();
    12de:	0e 94 95 08 	call	0x112a	; 0x112a <uart0_get_data_end>
		uart0_flags.data_received = FALSE;
    12e2:	80 91 6b 00 	lds	r24, 0x006B
    12e6:	87 7f       	andi	r24, 0xF7	; 247
    12e8:	80 93 6b 00 	sts	0x006B, r24
		if (TB_Read() == 0)
    12ec:	0e 94 b4 03 	call	0x768	; 0x768 <TB_Read>
    12f0:	81 11       	cpse	r24, r1
    12f2:	8f c0       	rjmp	.+286    	; 0x1412 <try_receive_data+0x15c>
		{
			
			switch (TB_Decode())
    12f4:	0e 94 d4 03 	call	0x7a8	; 0x7a8 <TB_Decode>
    12f8:	81 31       	cpi	r24, 0x11	; 17
    12fa:	09 f0       	breq	.+2      	; 0x12fe <try_receive_data+0x48>
    12fc:	8a c0       	rjmp	.+276    	; 0x1412 <try_receive_data+0x15c>
			{
				case TB_CMD_SERIOV:
					switch(TB_bufIn[TB_BUF_TYPE])
    12fe:	80 91 ab 00 	lds	r24, 0x00AB
    1302:	81 30       	cpi	r24, 0x01	; 1
    1304:	89 f1       	breq	.+98     	; 0x1368 <try_receive_data+0xb2>
    1306:	20 f0       	brcs	.+8      	; 0x1310 <try_receive_data+0x5a>
    1308:	82 30       	cpi	r24, 0x02	; 2
    130a:	09 f4       	brne	.+2      	; 0x130e <try_receive_data+0x58>
    130c:	58 c0       	rjmp	.+176    	; 0x13be <try_receive_data+0x108>
    130e:	81 c0       	rjmp	.+258    	; 0x1412 <try_receive_data+0x15c>
					{
						case 0:
							if (rc522_read_card_id(curr_id, &card_tipe))
    1310:	6e ee       	ldi	r22, 0xEE	; 238
    1312:	71 e0       	ldi	r23, 0x01	; 1
    1314:	81 e0       	ldi	r24, 0x01	; 1
    1316:	92 e0       	ldi	r25, 0x02	; 2
    1318:	0e 94 04 09 	call	0x1208	; 0x1208 <rc522_read_card_id>
    131c:	88 23       	and	r24, r24
    131e:	e9 f0       	breq	.+58     	; 0x135a <try_receive_data+0xa4>
							{
								TB_SendSerVzorku(TB_AddrReply, TB_AddrModule, TB_ERR_OK, curr_id[0], curr_id[1], curr_id[2], curr_id[3], curr_id[4]);
    1320:	a0 90 05 02 	lds	r10, 0x0205
    1324:	c0 90 04 02 	lds	r12, 0x0204
    1328:	e0 90 03 02 	lds	r14, 0x0203
    132c:	00 91 02 02 	lds	r16, 0x0202
    1330:	20 91 01 02 	lds	r18, 0x0201
    1334:	44 e6       	ldi	r20, 0x64	; 100
    1336:	60 91 a8 00 	lds	r22, 0x00A8
    133a:	80 91 b4 00 	lds	r24, 0x00B4
    133e:	0e 94 07 07 	call	0xe0e	; 0xe0e <TB_SendSerVzorku>
								mfrc522_halt();
    1342:	0e 94 87 02 	call	0x50e	; 0x50e <mfrc522_halt>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    1346:	2f ef       	ldi	r18, 0xFF	; 255
    1348:	8f e7       	ldi	r24, 0x7F	; 127
    134a:	94 e0       	ldi	r25, 0x04	; 4
    134c:	21 50       	subi	r18, 0x01	; 1
    134e:	80 40       	sbci	r24, 0x00	; 0
    1350:	90 40       	sbci	r25, 0x00	; 0
    1352:	e1 f7       	brne	.-8      	; 0x134c <try_receive_data+0x96>
    1354:	00 c0       	rjmp	.+0      	; 0x1356 <try_receive_data+0xa0>
    1356:	00 00       	nop
    1358:	5c c0       	rjmp	.+184    	; 0x1412 <try_receive_data+0x15c>
								_delay_ms(100);
							}
							else
							{
								TB_SendAck(TB_CV_ERR_SER, 0);
    135a:	40 e0       	ldi	r20, 0x00	; 0
    135c:	50 e0       	ldi	r21, 0x00	; 0
    135e:	ba 01       	movw	r22, r20
    1360:	8b e0       	ldi	r24, 0x0B	; 11
    1362:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
    1366:	55 c0       	rjmp	.+170    	; 0x1412 <try_receive_data+0x15c>
							}
							break;
						case 1:
							if (rc522_read_card_id(curr_id, &card_tipe))
    1368:	6e ee       	ldi	r22, 0xEE	; 238
    136a:	71 e0       	ldi	r23, 0x01	; 1
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	92 e0       	ldi	r25, 0x02	; 2
    1370:	0e 94 04 09 	call	0x1208	; 0x1208 <rc522_read_card_id>
    1374:	88 23       	and	r24, r24
    1376:	e1 f0       	breq	.+56     	; 0x13b0 <try_receive_data+0xfa>
							{
								//login to block 4
								status = mfrc522_auth(PICC_AUTHENT1A, TB_bufIn[TB_BUF_MOTOR], keyA_default, curr_id);
    1378:	21 e0       	ldi	r18, 0x01	; 1
    137a:	32 e0       	ldi	r19, 0x02	; 2
    137c:	40 e6       	ldi	r20, 0x60	; 96
    137e:	50 e0       	ldi	r21, 0x00	; 0
    1380:	60 91 ac 00 	lds	r22, 0x00AC
    1384:	80 e6       	ldi	r24, 0x60	; 96
    1386:	0e 94 e5 02 	call	0x5ca	; 0x5ca <mfrc522_auth>
    138a:	80 93 00 02 	sts	0x0200, r24
								TB_SendAck(status, 0);
    138e:	40 e0       	ldi	r20, 0x00	; 0
    1390:	50 e0       	ldi	r21, 0x00	; 0
    1392:	ba 01       	movw	r22, r20
    1394:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
								str[1] = TB_Value << 16;
								str[2] = TB_Value << 8;
								status = mfrc522_write_block(TB_bufIn[TB_BUF_MOTOR], str);
								TB_SendAck(TB_ERR_OK, status);
								*/
								mfrc522_halt();
    1398:	0e 94 87 02 	call	0x50e	; 0x50e <mfrc522_halt>
    139c:	2f ef       	ldi	r18, 0xFF	; 255
    139e:	8f e7       	ldi	r24, 0x7F	; 127
    13a0:	94 e0       	ldi	r25, 0x04	; 4
    13a2:	21 50       	subi	r18, 0x01	; 1
    13a4:	80 40       	sbci	r24, 0x00	; 0
    13a6:	90 40       	sbci	r25, 0x00	; 0
    13a8:	e1 f7       	brne	.-8      	; 0x13a2 <try_receive_data+0xec>
    13aa:	00 c0       	rjmp	.+0      	; 0x13ac <try_receive_data+0xf6>
    13ac:	00 00       	nop
    13ae:	31 c0       	rjmp	.+98     	; 0x1412 <try_receive_data+0x15c>
								_delay_ms(100);
							}
							else
							{
								TB_SendAck(TB_CV_ERR_SER, 0);
    13b0:	40 e0       	ldi	r20, 0x00	; 0
    13b2:	50 e0       	ldi	r21, 0x00	; 0
    13b4:	ba 01       	movw	r22, r20
    13b6:	8b e0       	ldi	r24, 0x0B	; 11
    13b8:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
    13bc:	2a c0       	rjmp	.+84     	; 0x1412 <try_receive_data+0x15c>
							}
							break;
						case 2:
							if (rc522_read_card_id(curr_id, &card_tipe))
    13be:	6e ee       	ldi	r22, 0xEE	; 238
    13c0:	71 e0       	ldi	r23, 0x01	; 1
    13c2:	81 e0       	ldi	r24, 0x01	; 1
    13c4:	92 e0       	ldi	r25, 0x02	; 2
    13c6:	0e 94 04 09 	call	0x1208	; 0x1208 <rc522_read_card_id>
    13ca:	88 23       	and	r24, r24
    13cc:	e1 f0       	breq	.+56     	; 0x1406 <try_receive_data+0x150>
							{
								//read block 4
								status = mfrc522_auth(PICC_AUTHENT1A, TB_bufIn[TB_BUF_MOTOR], keyA_default, curr_id);
    13ce:	21 e0       	ldi	r18, 0x01	; 1
    13d0:	32 e0       	ldi	r19, 0x02	; 2
    13d2:	40 e6       	ldi	r20, 0x60	; 96
    13d4:	50 e0       	ldi	r21, 0x00	; 0
    13d6:	60 91 ac 00 	lds	r22, 0x00AC
    13da:	80 e6       	ldi	r24, 0x60	; 96
    13dc:	0e 94 e5 02 	call	0x5ca	; 0x5ca <mfrc522_auth>
    13e0:	80 93 00 02 	sts	0x0200, r24
								TB_SendAck(status, 0);
    13e4:	40 e0       	ldi	r20, 0x00	; 0
    13e6:	50 e0       	ldi	r21, 0x00	; 0
    13e8:	ba 01       	movw	r22, r20
    13ea:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
								/*status = mfrc522_read_block(TB_bufIn[TB_BUF_MOTOR], str);
								TB_SendAck(status, str);
								*/
								mfrc522_halt();
    13ee:	0e 94 87 02 	call	0x50e	; 0x50e <mfrc522_halt>
    13f2:	2f ef       	ldi	r18, 0xFF	; 255
    13f4:	8f e7       	ldi	r24, 0x7F	; 127
    13f6:	94 e0       	ldi	r25, 0x04	; 4
    13f8:	21 50       	subi	r18, 0x01	; 1
    13fa:	80 40       	sbci	r24, 0x00	; 0
    13fc:	90 40       	sbci	r25, 0x00	; 0
    13fe:	e1 f7       	brne	.-8      	; 0x13f8 <try_receive_data+0x142>
    1400:	00 c0       	rjmp	.+0      	; 0x1402 <try_receive_data+0x14c>
    1402:	00 00       	nop
    1404:	06 c0       	rjmp	.+12     	; 0x1412 <try_receive_data+0x15c>
								_delay_ms(100);
							}
							else
							{
								TB_SendAck(TB_CV_ERR_SER, 0);
    1406:	40 e0       	ldi	r20, 0x00	; 0
    1408:	50 e0       	ldi	r21, 0x00	; 0
    140a:	ba 01       	movw	r22, r20
    140c:	8b e0       	ldi	r24, 0x0B	; 11
    140e:	0e 94 99 03 	call	0x732	; 0x732 <TB_SendAck>
					}
					break;
			}
		}
	}
}
    1412:	0f 91       	pop	r16
    1414:	ef 90       	pop	r14
    1416:	cf 90       	pop	r12
    1418:	af 90       	pop	r10
    141a:	08 95       	ret

0000141c <main>:

int main(void)
{
	
	DDRA = (1 << PA7) | (1 << PA6) | (1 << PA5);
    141c:	80 ee       	ldi	r24, 0xE0	; 224
    141e:	8a bb       	out	0x1a, r24	; 26
	//DDRB |= (1 << DDB4) | (1 << DDB3);
	//DDRC |= (1 << DDC7) | (1 << DDC6) | (1 << DDC5) | (1 << DDC4);
	DDRD |= (1 << DDD2);
    1420:	8a 9a       	sbi	0x11, 2	; 17
	
	//PORTA = 0x00;
	
	timer_init();
    1422:	0e 94 39 03 	call	0x672	; 0x672 <timer_init>
	uart0_init();
    1426:	0e 94 cd 07 	call	0xf9a	; 0xf9a <uart0_init>
	TB_Callback_setBaud = &uart0_set_baud;
    142a:	83 ed       	ldi	r24, 0xD3	; 211
    142c:	98 e0       	ldi	r25, 0x08	; 8
    142e:	90 93 67 00 	sts	0x0067, r25
    1432:	80 93 66 00 	sts	0x0066, r24
	TB_Callback_TX = &send_data;
    1436:	8f ef       	ldi	r24, 0xFF	; 255
    1438:	98 e0       	ldi	r25, 0x08	; 8
    143a:	90 93 69 00 	sts	0x0069, r25
    143e:	80 93 68 00 	sts	0x0068, r24
	TB_Init((void*) 0x10); // addr in eeprom with settings
    1442:	80 e1       	ldi	r24, 0x10	; 16
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 5e 03 	call	0x6bc	; 0x6bc <TB_Init>
	
	//SPI_MasterInit();
	spi_init();
    144a:	0e 94 2f 03 	call	0x65e	; 0x65e <spi_init>
	mfrc522_init();
    144e:	0e 94 71 00 	call	0xe2	; 0xe2 <mfrc522_init>

	
	sei();
    1452:	78 94       	sei
	
    while(1)
    {
		
		process_timer_100Hz();
    1454:	0e 94 46 09 	call	0x128c	; 0x128c <process_timer_100Hz>
		uart0_process();
    1458:	0e 94 db 07 	call	0xfb6	; 0xfb6 <uart0_process>
		try_receive_data();
    145c:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <try_receive_data>
    1460:	f9 cf       	rjmp	.-14     	; 0x1454 <main+0x38>

00001462 <__tablejump2__>:
    1462:	ee 0f       	add	r30, r30
    1464:	ff 1f       	adc	r31, r31

00001466 <__tablejump__>:
    1466:	05 90       	lpm	r0, Z+
    1468:	f4 91       	lpm	r31, Z
    146a:	e0 2d       	mov	r30, r0
    146c:	09 94       	ijmp

0000146e <__eerd_block_m32>:
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22

00001472 <__eerd_blraw_m32>:
    1472:	fc 01       	movw	r30, r24
    1474:	e1 99       	sbic	0x1c, 1	; 28
    1476:	fe cf       	rjmp	.-4      	; 0x1474 <__eerd_blraw_m32+0x2>
    1478:	06 c0       	rjmp	.+12     	; 0x1486 <__eerd_blraw_m32+0x14>
    147a:	ff bb       	out	0x1f, r31	; 31
    147c:	ee bb       	out	0x1e, r30	; 30
    147e:	e0 9a       	sbi	0x1c, 0	; 28
    1480:	31 96       	adiw	r30, 0x01	; 1
    1482:	0d b2       	in	r0, 0x1d	; 29
    1484:	0d 92       	st	X+, r0
    1486:	41 50       	subi	r20, 0x01	; 1
    1488:	50 40       	sbci	r21, 0x00	; 0
    148a:	b8 f7       	brcc	.-18     	; 0x147a <__eerd_blraw_m32+0x8>
    148c:	08 95       	ret

0000148e <__eeupd_byte_m32>:
    148e:	26 2f       	mov	r18, r22

00001490 <__eeupd_r18_m32>:
    1490:	e1 99       	sbic	0x1c, 1	; 28
    1492:	fe cf       	rjmp	.-4      	; 0x1490 <__eeupd_r18_m32>
    1494:	9f bb       	out	0x1f, r25	; 31
    1496:	8e bb       	out	0x1e, r24	; 30
    1498:	e0 9a       	sbi	0x1c, 0	; 28
    149a:	01 97       	sbiw	r24, 0x01	; 1
    149c:	0d b2       	in	r0, 0x1d	; 29
    149e:	02 16       	cp	r0, r18
    14a0:	31 f0       	breq	.+12     	; 0x14ae <__eeupd_r18_m32+0x1e>
    14a2:	2d bb       	out	0x1d, r18	; 29
    14a4:	0f b6       	in	r0, 0x3f	; 63
    14a6:	f8 94       	cli
    14a8:	e2 9a       	sbi	0x1c, 2	; 28
    14aa:	e1 9a       	sbi	0x1c, 1	; 28
    14ac:	0f be       	out	0x3f, r0	; 63
    14ae:	08 95       	ret

000014b0 <__eewr_block_m32>:
    14b0:	dc 01       	movw	r26, r24
    14b2:	cb 01       	movw	r24, r22
    14b4:	03 c0       	rjmp	.+6      	; 0x14bc <__eewr_block_m32+0xc>
    14b6:	2d 91       	ld	r18, X+
    14b8:	0e 94 63 0a 	call	0x14c6	; 0x14c6 <__eewr_r18_m32>
    14bc:	41 50       	subi	r20, 0x01	; 1
    14be:	50 40       	sbci	r21, 0x00	; 0
    14c0:	d0 f7       	brcc	.-12     	; 0x14b6 <__eewr_block_m32+0x6>
    14c2:	08 95       	ret

000014c4 <__eewr_byte_m32>:
    14c4:	26 2f       	mov	r18, r22

000014c6 <__eewr_r18_m32>:
    14c6:	e1 99       	sbic	0x1c, 1	; 28
    14c8:	fe cf       	rjmp	.-4      	; 0x14c6 <__eewr_r18_m32>
    14ca:	9f bb       	out	0x1f, r25	; 31
    14cc:	8e bb       	out	0x1e, r24	; 30
    14ce:	2d bb       	out	0x1d, r18	; 29
    14d0:	0f b6       	in	r0, 0x3f	; 63
    14d2:	f8 94       	cli
    14d4:	e2 9a       	sbi	0x1c, 2	; 28
    14d6:	e1 9a       	sbi	0x1c, 1	; 28
    14d8:	0f be       	out	0x3f, r0	; 63
    14da:	01 96       	adiw	r24, 0x01	; 1
    14dc:	08 95       	ret

000014de <_exit>:
    14de:	f8 94       	cli

000014e0 <__stop_program>:
    14e0:	ff cf       	rjmp	.-2      	; 0x14e0 <__stop_program>
